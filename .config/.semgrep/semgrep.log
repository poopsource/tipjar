2025-05-31 11:15:11,191 - semgrep.notifications - WARNING - METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

2025-05-31 11:15:11,193 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-05-31 11:15:11,199 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-05-31 11:15:11,200 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-31 11:15:11,202 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-31 11:15:11,205 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-292a365_.rules
2025-05-31 11:15:11,403 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIaGPSGB/semgrep/bin/semgrep-core-proprietary'.
2025-05-31 11:15:11,927 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-05-31 11:15:11,927 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-05-31 11:15:11,927 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-05-31 11:15:11,928 - semgrep.config_resolver - DEBUG - loaded 1 configs in 0.7281062602996826
2025-05-31 11:15:12,004 - semgrep.run_scan - VERBOSE - running 711 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-05-31 11:15:12,004 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-05-31 11:15:12,006 - semgrep.run_scan - VERBOSE - Rules:
2025-05-31 11:15:12,006 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-05-31 11:15:12,491 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-05-31 11:15:12,661 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-05-31 11:15:12,661 - semgrep.core_runner - DEBUG - /tmp/_MEIaGPSGB/semgrep/bin/opengrep-core -json -rules /tmp/tmpjuhu5rv5.json -j 8 -targets /tmp/tmpz_zncmdi -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-05-31 11:15:24,173 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.08][[34mINFO[0m]: Executed as: /tmp/_MEIaGPSGB/semgrep/bin/opengrep-core -json -rules /tmp/tmpjuhu5rv5.json -j 8 -targets /tmp/tmpz_zncmdi -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.08][[34mINFO[0m]: Version: 1.2.0
[00.08][[34mINFO[0m]: Parsing rules in /tmp/tmpjuhu5rv5.json
[00.64][[34mINFO[0m]: scan: processing 292 files (skipping 0), with 454 rules (skipping 0 )
[11.47][[34mINFO[0m]: Custom ignore pattern: None
[11.47][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-05-31 11:15:24,180 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8abf8d9db63038f272f870061eca0e31c4d91283b39796242cbeb2ef61b35034b6854d0a3d0878675de0aa5492ba0e226d75269395d0e3b6aa064255a28e9b33_0
2025-05-31 11:15:24,180 - semgrep.rule_match - DEBUG - match_key = (' rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" > <script  rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = a403bb0e3734c48737126578b59f3e58a9fa88090086a67019c474a3dff80fa4da691e192e4a0f40acea42d02c50811a7453f00b6233519067568d076ba66ced_0
2025-05-31 11:15:24,181 - semgrep.rule_match - DEBUG - match_key = (' rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" > <script  rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = a403bb0e3734c48737126578b59f3e58a9fa88090086a67019c474a3dff80fa4da691e192e4a0f40acea42d02c50811a7453f00b6233519067568d076ba66ced_0
2025-05-31 11:15:24,181 - semgrep.rule_match - DEBUG - match_key = (' rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" > <script  rel="icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = a403bb0e3734c48737126578b59f3e58a9fa88090086a67019c474a3dff80fa4da691e192e4a0f40acea42d02c50811a7453f00b6233519067568d076ba66ced_0
2025-05-31 11:15:24,182 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8abf8d9db63038f272f870061eca0e31c4d91283b39796242cbeb2ef61b35034b6854d0a3d0878675de0aa5492ba0e226d75269395d0e3b6aa064255a28e9b33_0
2025-05-31 11:15:24,182 - semgrep.rule_match - DEBUG - match_key = (' rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" > <script  rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 99c089938de0a16f95b8c06684b6a98a5f6e10ef1773d9a0ce53a03b2dbbd7a4c80ce22313bdb6684eb54a1e12c7263b757ffab1a345895b9b9428eb1d962be9_0
2025-05-31 11:15:24,183 - semgrep.rule_match - DEBUG - match_key = (' rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" > <script  rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 99c089938de0a16f95b8c06684b6a98a5f6e10ef1773d9a0ce53a03b2dbbd7a4c80ce22313bdb6684eb54a1e12c7263b757ffab1a345895b9b9428eb1d962be9_0
2025-05-31 11:15:24,183 - semgrep.rule_match - DEBUG - match_key = (' rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" > <script  rel="shortcut icon" href="https://upload.wikimedia.org/wikipedia/en/thumb/d/d3/Starbucks_Corporation_Logo_2011.svg/1200px-Starbucks_Corporation_Logo_2011.svg.png" type="image/png" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 99c089938de0a16f95b8c06684b6a98a5f6e10ef1773d9a0ce53a03b2dbbd7a4c80ce22313bdb6684eb54a1e12c7263b757ffab1a345895b9b9428eb1d962be9_0
2025-05-31 11:15:24,183 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8abf8d9db63038f272f870061eca0e31c4d91283b39796242cbeb2ef61b35034b6854d0a3d0878675de0aa5492ba0e226d75269395d0e3b6aa064255a28e9b33_0
2025-05-31 11:15:24,184 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = dab0a5a5b28cc14cbd3696da29316d2ffaaafe88a5c78b1838f69f068fe4a65b822d16e2ac9d15c308f6c117bbc9e624083efc5f28610ca6a64b5fcec9ec35ec_0
2025-05-31 11:15:24,184 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = dab0a5a5b28cc14cbd3696da29316d2ffaaafe88a5c78b1838f69f068fe4a65b822d16e2ac9d15c308f6c117bbc9e624083efc5f28610ca6a64b5fcec9ec35ec_0
2025-05-31 11:15:24,185 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = dab0a5a5b28cc14cbd3696da29316d2ffaaafe88a5c78b1838f69f068fe4a65b822d16e2ac9d15c308f6c117bbc9e624083efc5f28610ca6a64b5fcec9ec35ec_0
2025-05-31 11:15:24,185 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8abf8d9db63038f272f870061eca0e31c4d91283b39796242cbeb2ef61b35034b6854d0a3d0878675de0aa5492ba0e226d75269395d0e3b6aa064255a28e9b33_0
2025-05-31 11:15:24,186 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 82d14d40e2208d346471ce139a716b06d52d496702c3d37b1314ce4033e2b42d19782aa028f17d7c948ec926154ab3154f64004ef384e80720c9bf2e42986756_0
2025-05-31 11:15:24,186 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 82d14d40e2208d346471ce139a716b06d52d496702c3d37b1314ce4033e2b42d19782aa028f17d7c948ec926154ab3154f64004ef384e80720c9bf2e42986756_0
2025-05-31 11:15:24,187 - semgrep.rule_match - DEBUG - match_key = (' rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / > <script  rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" / >...</script>', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 82d14d40e2208d346471ce139a716b06d52d496702c3d37b1314ce4033e2b42d19782aa028f17d7c948ec926154ab3154f64004ef384e80720c9bf2e42986756_0
2025-05-31 11:15:24,194 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d923ef15df213d0a7bcd013399644de65d90716ae95e1e3b40d8de8b429fcfbc4262dc320704b3a7f77e3ca818d1beff45039e2fe8a012c7e4224ba29db8b193_0
2025-05-31 11:15:24,202 - semgrep.rule_match - DEBUG - match_key = ('\n        // Add the following JavaScript to handle the drag and drop functionality\n        const fileDropArea = document.querySelector(\'.file-drop-area\');\n        const fileInput = document.getElementById(\'imageUpload\');\n        \n        [\'dragenter\', \'dragover\', \'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n        \n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        \n        [\'dragenter\', \'dragover\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, highlight, false);\n        });\n        \n        [\'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, unhighlight, false);\n        });\n        \n        function highlight() {\n            fileDropArea.classList.add(\'dragover\');\n        }\n        \n        function unhighlight() {\n            fileDropArea.classList.remove(\'dragover\');\n        }\n        \n        fileDropArea.addEventListener(\'drop\', handleDrop, false);\n        \n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            fileInput.files = files;\n            \n            // Trigger the change event\n            const event = new Event(\'change\', { bubbles: true });\n            fileInput.dispatchEvent(event);\n        }\n\n        // Global state management (similar to Streamlit\'s session state)\n        const state = {\n            ocrResult: null,\n            imageData: null,\n            partnerData: null,\n            totalHours: 0,\n            tipCalculated: false,\n            weekCounter: 1,\n            tipsHistory: [],\n            hourlyRate: 0,\n            totalTipAmount: 0,\n            distributedTips: null\n        };\n\n        // Gemini API settings\n        const GEMINI_API_KEY = "AIzaSyCi_m_KbY-a36tvHl09C1Mtyx_K38GuokY";\n        const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";\n\n        // DOM Elements\n        const uploadSection = document.getElementById(\'uploadSection\');\n        const imageUpload = document.getElementById(\'imageUpload\');\n        const selectedFileName = document.getElementById(\'selectedFileName\');\n        const processButton = document.getElementById(\'processButton\');\n        const previewSection = document.getElementById(\'previewSection\');\n        const previewImage = document.getElementById(\'previewImage\');\n        const extractedTextSection = document.getElementById(\'extractedTextSection\');\n        const extractedText = document.getElementById(\'extractedText\');\n        const extractPartnerDataBtn = document.getElementById(\'extractPartnerDataBtn\');\n        const partnerDataSection = document.getElementById(\'partnerDataSection\');\n        const totalHours = document.getElementById(\'totalHours\');\n        const partnerList = document.getElementById(\'partnerList\');\n        const totalTipAmount = document.getElementById(\'totalTipAmount\');\n        const calculateTipsBtn = document.getElementById(\'calculateTipsBtn\');\n        const tipDistributionSection = document.getElementById(\'tipDistributionSection\');\n        const hourlyRateInfo = document.getElementById(\'hourlyRateInfo\');\n        const calculationDetails = document.getElementById(\'calculationDetails\');\n        const tipDistributionList = document.getElementById(\'tipDistributionList\');\n        const copyPasteFormat = document.getElementById(\'copyPasteFormat\');\n        const saveToHistoryBtn = document.getElementById(\'saveToHistoryBtn\');\n        const historySection = document.getElementById(\'historySection\');\n        const historyList = document.getElementById(\'historyList\');\n        const downloadSection = document.getElementById(\'downloadSection\');\n        const downloadOcrBtn = document.getElementById(\'downloadOcrBtn\');\n        const downloadTableBtn = document.getElementById(\'downloadTableBtn\');\n        const numPartners = document.getElementById(\'numPartners\');\n        const manualPartnerInputs = document.getElementById(\'manualPartnerInputs\');\n        const saveManualPartners = document.getElementById(\'saveManualPartners\');\n\n        // Event Listeners\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Set up collapsible sections\n            const collapsibles = document.getElementsByClassName(\'collapsible\');\n            for (let i = 0; i < collapsibles.length; i++) {\n                collapsibles[i].addEventListener(\'click\', function() {\n                    this.classList.toggle(\'active\');\n                    const content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    } else {\n                        content.style.maxHeight = content.scrollHeight + \'px\';\n                    }\n                });\n            }\n\n            // Set up number of partners change event\n            numPartners.addEventListener(\'change\', renderManualPartnerInputs);\n            renderManualPartnerInputs(); // Initial render\n        });\n\n        // File upload handling\n        imageUpload.addEventListener(\'change\', function(e) {\n            if (this.files.length > 0) {\n                const file = this.files[0];\n                selectedFileName.textContent = file.name;\n                processButton.classList.remove(\'opacity-50\', \'cursor-not-allowed\');\n                processButton.disabled = false;\n                \n                // Create image preview\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    state.imageData = e.target.result;\n                }\n                reader.readAsDataURL(file);\n            }\n        });\n\n        // Helper function to convert base64 to correct format for Gemini API\n        function convertBase64ForGemini(base64String) {\n            // Remove data URL prefix if present\n            const base64Data = base64String.includes(\',\') \n                ? base64String.split(\',\')[1] \n                : base64String;\n            \n            return base64Data;\n        }\n\n        // Process button with Gemini API - now combines both steps\n        processButton.addEventListener(\'click\', async function() {\n            if (!state.imageData) return;\n            \n            // Show loading state\n            this.textContent = \'Processing Tip Sheet...\';\n            this.disabled = true;\n            \n            try {\n                // Step 1: Process the image\n                const base64Image = convertBase64ForGemini(state.imageData);\n                \n                const promptText = "Please analyze this image and: " +\n                    "1. Extract all visible text, especially focusing on names and hours worked " +\n                    "2. Maintain the original formatting and structure " +\n                    "3. Preserve any important visual context " +\n                    "4. Make sure to clearly identify all partner/employee names and their corresponding hours " +\n                    "Extract and format the text clearly:";\n                \n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: promptText },\n                                {\n                                    inline_data: {\n                                        mime_type: "image/jpeg",\n                                        data: base64Image\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.4,\n                        topK: 32,\n                        topP: 1,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (responseData.candidates && \n                    responseData.candidates[0] && \n                    responseData.candidates[0].content && \n                    responseData.candidates[0].content.parts && \n                    responseData.candidates[0].content.parts[0] && \n                    responseData.candidates[0].content.parts[0].text) {\n                    \n                    state.ocrResult = responseData.candidates[0].content.parts[0].text;\n                    \n                    // Show preview\n                    previewSection.classList.remove(\'hidden\');\n                    previewImage.src = state.imageData;\n                    \n                    // Store extracted text but don\'t display the section\n                    extractedText.textContent = state.ocrResult;\n                    \n                    // Show download option for OCR text\n                    downloadSection.classList.remove(\'hidden\');\n                    updateDownloadLinks();\n                    \n                    // Step 2: Automatically extract partner data\n                    this.textContent = \'Extracting Partner Data...\';\n                    const success = await extractPartnerData();\n                    \n                    if (success) {\n                        // Hide extractedTextSection if it\'s visible (in case it was shown before)\n                        extractedTextSection.classList.add(\'hidden\');\n                    }\n                    \n                } else {\n                    throw new Error(\'Couldn\\\'t extract text from the API response\');\n                }\n            } catch (error) {\n                console.error(\'Error processing with Gemini API:\', error);\n                alert(`Error processing image: ${error.message || \'Unknown error\'}`);\n            } finally {\n                // Reset process button\n                processButton.textContent = \'Process\';\n                processButton.disabled = false;\n            }\n        });\n\n        // Extract partner data function (now called automatically by the process button)\n        async function extractPartnerData() {\n            if (!state.ocrResult) return false;\n            \n            try {\n                // Prepare the prompt for partner data extraction\n                const extractionPrompt = \n                    `From the following text, extract partner names and their hours worked. Format as JSON:\\n\\n` +\n                    `${state.ocrResult}\\n\\n` +\n                    `Return a JSON array of objects with \'name\' and \'hours\' fields. Example:\n                    [\n                        {"name": "John Smith", "hours": 32.5},\n                        {"name": "Jane Doe", "hours": 28.75}\n                    ]\n                    \n                    Only include valid partners with hours. Output ONLY the JSON array, nothing else.`;\n                \n                // Prepare the request payload\n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: extractionPrompt }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.2,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                // Make the API call to extract partner data\n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                const partnerDataText = responseData.candidates[0].content.parts[0].text;\n                \n                // Extract JSON from the response\n                const jsonMatch = partnerDataText.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n                let partnerData = [];\n                \n                if (jsonMatch) {\n                    try {\n                        partnerData = JSON.parse(jsonMatch[0]);\n                    } catch (e) {\n                        throw new Error(\'Failed to parse JSON from API response\');\n                    }\n                } else {\n                    throw new Error(\'No valid JSON found in the API response\');\n                }\n                \n                // Add partner numbers\n                partnerData.forEach((partner, index) => {\n                    partner.number = index + 1;\n                });\n                \n                // Calculate total hours\n                state.totalHours = partnerData.reduce((sum, partner) => sum + parseFloat(partner.hours), 0);\n                state.partnerData = partnerData;\n                \n                // Update UI\n                totalHours.textContent = `Total Hours: ${state.totalHours}`;\n                partnerList.innerHTML = \'\';\n                \n                partnerData.forEach(partner => {\n                    const partnerEl = document.createElement(\'div\');\n                    partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                    partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                    partnerList.appendChild(partnerEl);\n                });\n                \n                // Show partner data section\n                partnerDataSection.classList.remove(\'hidden\');\n                \n                // Scroll to partner data section\n                partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n                \n                return true;\n            } catch (error) {\n                console.error(\'Error extracting partner data:\', error);\n                alert(`Error extracting partner data: ${error.message || \'Unknown error\'}`);\n                return false;\n            }\n        }\n\n        // Calculate Tips button\n        calculateTipsBtn.addEventListener(\'click\', function() {\n            const tipAmount = parseFloat(totalTipAmount.value);\n            if (isNaN(tipAmount) || tipAmount <= 0) {\n                alert(\'Please enter a valid tip amount.\');\n                return;\n            }\n            \n            if (!state.partnerData || state.partnerData.length === 0) {\n                alert(\'No partner data available.\');\n                return;\n            }\n            \n            // Calculate hourly rate (truncate to 2 decimal places)\n            state.totalTipAmount = tipAmount;\n            state.hourlyRate = Math.floor((tipAmount / state.totalHours) * 100) / 100;\n            \n            // Calculate individual tips with bill distribution\n            const partnerData = JSON.parse(JSON.stringify(state.partnerData)); // Deep copy\n            const denominations = [20, 10, 5, 1];\n            const startIndex = (state.weekCounter - 1) % partnerData.length;\n            const remainingAmounts = {};\n            \n            // Calculate exact and rounded tip amounts\n            partnerData.forEach(partner => {\n                const exactAmount = partner.hours * state.hourlyRate;\n                partner.raw_tip_amount = exactAmount;\n                partner.exact_tip_amount = exactAmount;\n                partner.tip_amount = Math.round(exactAmount);\n                partner.bills = {20: 0, 10: 0, 5: 0, 1: 0};\n                remainingAmounts[partner.number] = partner.tip_amount;\n            });\n            \n            // Distribute bills\n            for (const denomination of denominations) {\n                // Create order of partners starting with rotation partner\n                const partnerOrder = [];\n                for (let i = 0; i < partnerData.length; i++) {\n                    partnerOrder.push((startIndex + i) % partnerData.length);\n                }\n                \n                // Distribute bills of this denomination\n                let distributed = true;\n                while (distributed) {\n                    distributed = false;\n                    for (const idx of partnerOrder) {\n                        const partner = partnerData[idx];\n                        if (remainingAmounts[partner.number] >= denomination) {\n                            partner.bills[denomination]++;\n                            remainingAmounts[partner.number] -= denomination;\n                            distributed = true;\n                        }\n                    }\n                }\n            }\n            \n            // Generate bills text and formatted output\n            partnerData.forEach(partner => {\n                const billsText = [];\n                for (const denom of [20, 10, 5, 1]) {\n                    if (partner.bills[denom] > 0) {\n                        billsText.push(`${partner.bills[denom]}x$${denom}`);\n                    }\n                }\n                \n                partner.bills_text = billsText.join(\',\');\n                partner.formatted_output = `Partner Name: ${partner.name} | #: ${partner.number} | ` +\n                    `Hours: ${partner.hours} | Exact: $${partner.exact_tip_amount.toFixed(2)} | ` +\n                    `Cash: $${partner.tip_amount} | Bills: ${partner.bills_text}`;\n            });\n            \n            // Save distributed tips to state\n            state.distributedTips = partnerData;\n            state.tipCalculated = true;\n            \n            // Update UI\n            calculationDetails.textContent = `Total Tips: $${tipAmount.toFixed(2)} ÷ Total Hours: ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour`;\n            \n            // Calculate total bills needed\n            const totalBills = {20: 0, 10: 0, 5: 0, 1: 0};\n            partnerData.forEach(partner => {\n                totalBills[20] += partner.bills[20];\n                totalBills[10] += partner.bills[10];\n                totalBills[5] += partner.bills[5];\n                totalBills[1] += partner.bills[1];\n            });\n            \n            // Update bills needed summary\n            document.getElementById(\'twentyCount\').textContent = totalBills[20];\n            document.getElementById(\'tenCount\').textContent = totalBills[10];\n            document.getElementById(\'fiveCount\').textContent = totalBills[5];\n            document.getElementById(\'oneCount\').textContent = totalBills[1];\n            \n            // Render tip distribution cards\n            tipDistributionList.innerHTML = \'\';\n            let copyPasteText = \'\';\n            \n            partnerData.forEach(partner => {\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${partner.exact_tip_amount.toFixed(2)}`;\n                \n                // Create partner card\n                const card = document.createElement(\'div\');\n                card.classList.add(\'partner-card\');\n                \n                // Split bills text into chips\n                const billChips = partner.bills_text.split(\',\').map(bill => \n                    `<span class="bill-chip">${bill.trim()}</span>`\n                ).join(\' \');\n                \n                card.innerHTML = `\n                    <div class="partner-card-header">\n                        <h4 class="partner-card-name">${partner.name}</h4>\n                        <span class="partner-card-amount">$${partner.tip_amount}</span>\n                    </div>\n                    <div class="mt-1">\n                        <span class="text-sm">${partner.hours} hours</span>\n                    </div>\n                    <div class="calculation-box">\n                        ${calculation} → $${partner.tip_amount}\n                    </div>\n                    <div class="bills-box">\n                        <div class="flex flex-wrap gap-1">\n                            ${billChips}\n                        </div>\n                    </div>\n                `;\n                \n                tipDistributionList.appendChild(card);\n                copyPasteText += partner.formatted_output + \'\\n\';\n            });\n            \n            // Update copy-paste format\n            copyPasteFormat.textContent = copyPasteText;\n            \n            // Show tip distribution section\n            tipDistributionSection.classList.remove(\'hidden\');\n            \n            // Update download links for the table\n            updateDownloadLinks();\n            \n            // Increment week counter for next allocation\n            state.weekCounter++;\n            \n            // Scroll to tip distribution section\n            tipDistributionSection.scrollIntoView({behavior: \'smooth\'});\n        });\n\n        // Save to History button\n        saveToHistoryBtn.addEventListener(\'click\', function() {\n            if (!state.distributedTips) return;\n            \n            const distribution = {\n                week: state.weekCounter - 1,\n                total_amount: state.totalTipAmount,\n                total_hours: state.totalHours,\n                partners: state.distributedTips\n            };\n            \n            state.tipsHistory.push(distribution);\n            \n            // Update UI\n            updateHistoryList();\n            historySection.classList.remove(\'hidden\');\n            \n            // Show success message\n            alert(\'Distribution saved to history!\');\n        });\n\n        // Functions for updating the UI\n        function updateDownloadLinks() {\n            if (state.ocrResult) {\n                const ocrBlob = new Blob([state.ocrResult], {type: \'text/plain\'});\n                downloadOcrBtn.href = URL.createObjectURL(ocrBlob);\n            }\n            \n            if (state.tipCalculated && state.distributedTips) {\n                const tableHtml = generateHtmlTable();\n                const tableBlob = new Blob([tableHtml], {type: \'text/html\'});\n                downloadTableBtn.href = URL.createObjectURL(tableBlob);\n                downloadTableBtn.classList.remove(\'hidden\');\n            } else {\n                downloadTableBtn.classList.add(\'hidden\');\n            }\n        }\n\n        function updateHistoryList() {\n            historyList.innerHTML = \'\';\n            \n            state.tipsHistory.forEach((dist, i) => {\n                const historyItem = document.createElement(\'div\');\n                historyItem.innerHTML = `\n                    <div class="custom-card mb-4">\n                        <h4 class="font-bold starbucks-green">Week ${dist.week}</h4>\n                        <p>Total: $${dist.total_amount.toFixed(2)} for ${dist.total_hours.toFixed(2)} hours</p>\n                        <div class="mt-2 pl-4">\n                            ${dist.partners.map(partner => \n                                `<div class="mb-1">\n                                    ${partner.name} | #${partner.number} | ${partner.hours} hours | $${partner.tip_amount} | ${partner.bills_text}\n                                </div>`\n                            ).join(\'\')}\n                        </div>\n                    </div>\n                `;\n                historyList.appendChild(historyItem);\n            });\n        }\n\n        function generateHtmlTable() {\n            const tipData = state.distributedTips.map(partner => {\n                const exactAmount = partner.exact_tip_amount;\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${exactAmount.toFixed(2)}`;\n                \n                return {\n                    "Partner Name": partner.name,\n                    "#": partner.number,\n                    "Hours": partner.hours,\n                    "Calculation": calculation,\n                    "Cash Amount": `$${partner.tip_amount}`,\n                    "Bills": partner.bills_text\n                };\n            });\n            \n            let tableRows = \'\';\n            tipData.forEach(partner => {\n                tableRows += `\n                    <tr>\n                        <td>${partner[\'#\']}</td>\n                        <td>${partner[\'Partner Name\']}</td>\n                        <td>${partner[\'Hours\']}</td>\n                        <td class="calculation">${partner[\'Calculation\']}</td>\n                        <td class="cash-amount">${partner[\'Cash Amount\']}</td>\n                        <td>${partner[\'Bills\']}</td>\n                    </tr>\n                `;\n            });\n            \n            return `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <meta charset="UTF-8">\n                    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                    <title>TipJar Results</title>\n                    <style>\n                        body {\n                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;\n                            margin: 20px;\n                            padding: 0;\n                            color: #333;\n                        }\n                        h1 {\n                            color: #00704A;\n                            text-align: center;\n                        }\n                        .info {\n                            margin: 10px 0;\n                            background-color: #f8f9fa;\n                            padding: 10px;\n                            border-radius: 8px;\n                        }\n                        table {\n                            width: 100%;\n                            border-collapse: collapse;\n                            margin-top: 20px;\n                            border-radius: 8px;\n                            overflow: hidden;\n                        }\n                        th, td {\n                            border: 1px solid #ddd;\n                            padding: 12px 8px;\n                            text-align: left;\n                        }\n                        th {\n                            background-color: #00704A;\n                            color: white;\n                        }\n                        tr:nth-child(even) {\n                            background-color: #f2f2f2;\n                        }\n                        .calculation {\n                            color: #666;\n                            font-size: 0.9em;\n                        }\n                        .cash-amount {\n                            font-weight: bold;\n                            color: #00704A;\n                        }\n                        @media (max-width: 600px) {\n                            th, td {\n                                padding: 8px 4px;\n                                font-size: 14px;\n                            }\n                        }\n                    </style>\n                </head>\n                <body>\n                    <h1>Tip Distribution Results</h1>\n                    <div class="info">\n                        <p><strong>Hourly Rate Calculation:</strong> $${state.totalTipAmount.toFixed(2)} ÷ ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour</p>\n                        <p><strong>Bills Needed:</strong> ${totalBills[20]} × $20, ${totalBills[10]} × $10, ${totalBills[5]} × $5, ${totalBills[1]} × $1</p>\n                    </div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Partner Name</th>\n                                <th>Hours</th>\n                                <th>Calculation</th>\n                                <th>Cash</th>\n                                <th>Bills</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${tableRows}\n                        </tbody>\n                    </table>\n                </body>\n                </html>\n            `;\n        }\n\n        // Manual partner input handling\n        function renderManualPartnerInputs() {\n            const count = parseInt(numPartners.value) || 3;\n            manualPartnerInputs.innerHTML = \'\';\n            \n            for (let i = 0; i < count; i++) {\n                const partnerDiv = document.createElement(\'div\');\n                partnerDiv.classList.add(\'mb-6\', \'p-3\', \'border\', \'rounded-lg\');\n                partnerDiv.innerHTML = `\n                    <h4 class="mb-2 starbucks-green">Partner ${i+1}</h4>\n                    <div class="mb-2">\n                        <label for="name_${i}" class="block mb-1">Name:</label>\n                        <input type="text" id="name_${i}" class="w-full">\n                    </div>\n                    <div>\n                        <label for="hours_${i}" class="block mb-1">Hours:</label>\n                        <input type="number" id="hours_${i}" min="0" step="0.25" class="w-full">\n                    </div>\n                `;\n                manualPartnerInputs.appendChild(partnerDiv);\n            }\n        }\n\n        // Save manual partner data\n        saveManualPartners.addEventListener(\'click\', function() {\n            const count = parseInt(numPartners.value) || 3;\n            const manualPartnerData = [];\n            \n            for (let i = 0; i < count; i++) {\n                const name = document.getElementById(`name_${i}`).value;\n                const hours = parseFloat(document.getElementById(`hours_${i}`).value) || 0;\n                \n                if (name && hours > 0) {\n                    manualPartnerData.push({\n                        name: name,\n                        number: i + 1,\n                        hours: hours\n                    });\n                }\n            }\n            \n            if (manualPartnerData.length === 0) {\n                alert(\'Please provide valid names and hours for at least one partner.\');\n                return;\n            }\n            \n            // Update state\n            state.partnerData = manualPartnerData;\n            state.totalHours = manualPartnerData.reduce((sum, partner) => sum + partner.hours, 0);\n            \n            // Update UI\n            totalHours.textContent = `Total Hours: ${state.totalHours}`;\n            partnerList.innerHTML = \'\';\n            \n            manualPartnerData.forEach(partner => {\n                const partnerEl = document.createElement(\'div\');\n                partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                partnerList.appendChild(partnerEl);\n            });\n            \n            // Show partner data section\n            partnerDataSection.classList.remove(\'hidden\');\n            \n            // Scroll to partner data section\n            partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n            \n            // Close the collapsible\n            const collapsible = document.querySelector(\'.collapsible\');\n            if (collapsible.classList.contains(\'active\')) {\n                collapsible.click();\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Add the following JavaScript to handle the drag and drop functionality\n        const fileDropArea = document.querySelector(\'.file-drop-area\');\n        const fileInput = document.getElementById(\'imageUpload\');\n        \n        [\'dragenter\', \'dragover\', \'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n        \n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        \n        [\'dragenter\', \'dragover\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, highlight, false);\n        });\n        \n        [\'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, unhighlight, false);\n        });\n        \n        function highlight() {\n            fileDropArea.classList.add(\'dragover\');\n        }\n        \n        function unhighlight() {\n            fileDropArea.classList.remove(\'dragover\');\n        }\n        \n        fileDropArea.addEventListener(\'drop\', handleDrop, false);\n        \n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            fileInput.files = files;\n            \n            // Trigger the change event\n            const event = new Event(\'change\', { bubbles: true });\n            fileInput.dispatchEvent(event);\n        }\n\n        // Global state management (similar to Streamlit\'s session state)\n        const state = {\n            ocrResult: null,\n            imageData: null,\n            partnerData: null,\n            totalHours: 0,\n            tipCalculated: false,\n            weekCounter: 1,\n            tipsHistory: [],\n            hourlyRate: 0,\n            totalTipAmount: 0,\n            distributedTips: null\n        };\n\n        // Gemini API settings\n        const GEMINI_API_KEY = "AIzaSyCi_m_KbY-a36tvHl09C1Mtyx_K38GuokY";\n        const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";\n\n        // DOM Elements\n        const uploadSection = document.getElementById(\'uploadSection\');\n        const imageUpload = document.getElementById(\'imageUpload\');\n        const selectedFileName = document.getElementById(\'selectedFileName\');\n        const processButton = document.getElementById(\'processButton\');\n        const previewSection = document.getElementById(\'previewSection\');\n        const previewImage = document.getElementById(\'previewImage\');\n        const extractedTextSection = document.getElementById(\'extractedTextSection\');\n        const extractedText = document.getElementById(\'extractedText\');\n        const extractPartnerDataBtn = document.getElementById(\'extractPartnerDataBtn\');\n        const partnerDataSection = document.getElementById(\'partnerDataSection\');\n        const totalHours = document.getElementById(\'totalHours\');\n        const partnerList = document.getElementById(\'partnerList\');\n        const totalTipAmount = document.getElementById(\'totalTipAmount\');\n        const calculateTipsBtn = document.getElementById(\'calculateTipsBtn\');\n        const tipDistributionSection = document.getElementById(\'tipDistributionSection\');\n        const hourlyRateInfo = document.getElementById(\'hourlyRateInfo\');\n        const calculationDetails = document.getElementById(\'calculationDetails\');\n        const tipDistributionList = document.getElementById(\'tipDistributionList\');\n        const copyPasteFormat = document.getElementById(\'copyPasteFormat\');\n        const saveToHistoryBtn = document.getElementById(\'saveToHistoryBtn\');\n        const historySection = document.getElementById(\'historySection\');\n        const historyList = document.getElementById(\'historyList\');\n        const downloadSection = document.getElementById(\'downloadSection\');\n        const downloadOcrBtn = document.getElementById(\'downloadOcrBtn\');\n        const downloadTableBtn = document.getElementById(\'downloadTableBtn\');\n        const numPartners = document.getElementById(\'numPartners\');\n        const manualPartnerInputs = document.getElementById(\'manualPartnerInputs\');\n        const saveManualPartners = document.getElementById(\'saveManualPartners\');\n\n        // Event Listeners\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Set up collapsible sections\n            const collapsibles = document.getElementsByClassName(\'collapsible\');\n            for (let i = 0; i < collapsibles.length; i++) {\n                collapsibles[i].addEventListener(\'click\', function() {\n                    this.classList.toggle(\'active\');\n                    const content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    } else {\n                        content.style.maxHeight = content.scrollHeight + \'px\';\n                    }\n                });\n            }\n\n            // Set up number of partners change event\n            numPartners.addEventListener(\'change\', renderManualPartnerInputs);\n            renderManualPartnerInputs(); // Initial render\n        });\n\n        // File upload handling\n        imageUpload.addEventListener(\'change\', function(e) {\n            if (this.files.length > 0) {\n                const file = this.files[0];\n                selectedFileName.textContent = file.name;\n                processButton.classList.remove(\'opacity-50\', \'cursor-not-allowed\');\n                processButton.disabled = false;\n                \n                // Create image preview\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    state.imageData = e.target.result;\n                }\n                reader.readAsDataURL(file);\n            }\n        });\n\n        // Helper function to convert base64 to correct format for Gemini API\n        function convertBase64ForGemini(base64String) {\n            // Remove data URL prefix if present\n            const base64Data = base64String.includes(\',\') \n                ? base64String.split(\',\')[1] \n                : base64String;\n            \n            return base64Data;\n        }\n\n        // Process button with Gemini API - now combines both steps\n        processButton.addEventListener(\'click\', async function() {\n            if (!state.imageData) return;\n            \n            // Show loading state\n            this.textContent = \'Processing Tip Sheet...\';\n            this.disabled = true;\n            \n            try {\n                // Step 1: Process the image\n                const base64Image = convertBase64ForGemini(state.imageData);\n                \n                const promptText = "Please analyze this image and: " +\n                    "1. Extract all visible text, especially focusing on names and hours worked " +\n                    "2. Maintain the original formatting and structure " +\n                    "3. Preserve any important visual context " +\n                    "4. Make sure to clearly identify all partner/employee names and their corresponding hours " +\n                    "Extract and format the text clearly:";\n                \n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: promptText },\n                                {\n                                    inline_data: {\n                                        mime_type: "image/jpeg",\n                                        data: base64Image\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.4,\n                        topK: 32,\n                        topP: 1,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (responseData.candidates && \n                    responseData.candidates[0] && \n                    responseData.candidates[0].content && \n                    responseData.candidates[0].content.parts && \n                    responseData.candidates[0].content.parts[0] && \n                    responseData.candidates[0].content.parts[0].text) {\n                    \n                    state.ocrResult = responseData.candidates[0].content.parts[0].text;\n                    \n                    // Show preview\n                    previewSection.classList.remove(\'hidden\');\n                    previewImage.src = state.imageData;\n                    \n                    // Store extracted text but don\'t display the section\n                    extractedText.textContent = state.ocrResult;\n                    \n                    // Show download option for OCR text\n                    downloadSection.classList.remove(\'hidden\');\n                    updateDownloadLinks();\n                    \n                    // Step 2: Automatically extract partner data\n                    this.textContent = \'Extracting Partner Data...\';\n                    const success = await extractPartnerData();\n                    \n                    if (success) {\n                        // Hide extractedTextSection if it\'s visible (in case it was shown before)\n                        extractedTextSection.classList.add(\'hidden\');\n                    }\n                    \n                } else {\n                    throw new Error(\'Couldn\\\'t extract text from the API response\');\n                }\n            } catch (error) {\n                console.error(\'Error processing with Gemini API:\', error);\n                alert(`Error processing image: ${error.message || \'Unknown error\'}`);\n            } finally {\n                // Reset process button\n                processButton.textContent = \'Process\';\n                processButton.disabled = false;\n            }\n        });\n\n        // Extract partner data function (now called automatically by the process button)\n        async function extractPartnerData() {\n            if (!state.ocrResult) return false;\n            \n            try {\n                // Prepare the prompt for partner data extraction\n                const extractionPrompt = \n                    `From the following text, extract partner names and their hours worked. Format as JSON:\\n\\n` +\n                    `${state.ocrResult}\\n\\n` +\n                    `Return a JSON array of objects with \'name\' and \'hours\' fields. Example:\n                    [\n                        {"name": "John Smith", "hours": 32.5},\n                        {"name": "Jane Doe", "hours": 28.75}\n                    ]\n                    \n                    Only include valid partners with hours. Output ONLY the JSON array, nothing else.`;\n                \n                // Prepare the request payload\n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: extractionPrompt }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.2,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                // Make the API call to extract partner data\n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                const partnerDataText = responseData.candidates[0].content.parts[0].text;\n                \n                // Extract JSON from the response\n                const jsonMatch = partnerDataText.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n                let partnerData = [];\n                \n                if (jsonMatch) {\n                    try {\n                        partnerData = JSON.parse(jsonMatch[0]);\n                    } catch (e) {\n                        throw new Error(\'Failed to parse JSON from API response\');\n                    }\n                } else {\n                    throw new Error(\'No valid JSON found in the API response\');\n                }\n                \n                // Add partner numbers\n                partnerData.forEach((partner, index) => {\n                    partner.number = index + 1;\n                });\n                \n                // Calculate total hours\n                state.totalHours = partnerData.reduce((sum, partner) => sum + parseFloat(partner.hours), 0);\n                state.partnerData = partnerData;\n                \n                // Update UI\n                totalHours.textContent = `Total Hours: ${state.totalHours}`;\n                partnerList.innerHTML = \'\';\n                \n                partnerData.forEach(partner => {\n                    const partnerEl = document.createElement(\'div\');\n                    partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                    partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                    partnerList.appendChild(partnerEl);\n                });\n                \n                // Show partner data section\n                partnerDataSection.classList.remove(\'hidden\');\n                \n                // Scroll to partner data section\n                partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n                \n                return true;\n            } catch (error) {\n                console.error(\'Error extracting partner data:\', error);\n                alert(`Error extracting partner data: ${error.message || \'Unknown error\'}`);\n                return false;\n            }\n        }\n\n        // Calculate Tips button\n        calculateTipsBtn.addEventListener(\'click\', function() {\n            const tipAmount = parseFloat(totalTipAmount.value);\n            if (isNaN(tipAmount) || tipAmount <= 0) {\n                alert(\'Please enter a valid tip amount.\');\n                return;\n            }\n            \n            if (!state.partnerData || state.partnerData.length === 0) {\n                alert(\'No partner data available.\');\n                return;\n            }\n            \n            // Calculate hourly rate (truncate to 2 decimal places)\n            state.totalTipAmount = tipAmount;\n            state.hourlyRate = Math.floor((tipAmount / state.totalHours) * 100) / 100;\n            \n            // Calculate individual tips with bill distribution\n            const partnerData = JSON.parse(JSON.stringify(state.partnerData)); // Deep copy\n            const denominations = [20, 10, 5, 1];\n            const startIndex = (state.weekCounter - 1) % partnerData.length;\n            const remainingAmounts = {};\n            \n            // Calculate exact and rounded tip amounts\n            partnerData.forEach(partner => {\n                const exactAmount = partner.hours * state.hourlyRate;\n                partner.raw_tip_amount = exactAmount;\n                partner.exact_tip_amount = exactAmount;\n                partner.tip_amount = Math.round(exactAmount);\n                partner.bills = {20: 0, 10: 0, 5: 0, 1: 0};\n                remainingAmounts[partner.number] = partner.tip_amount;\n            });\n            \n            // Distribute bills\n            for (const denomination of denominations) {\n                // Create order of partners starting with rotation partner\n                const partnerOrder = [];\n                for (let i = 0; i < partnerData.length; i++) {\n                    partnerOrder.push((startIndex + i) % partnerData.length);\n                }\n                \n                // Distribute bills of this denomination\n                let distributed = true;\n                while (distributed) {\n                    distributed = false;\n                    for (const idx of partnerOrder) {\n                        const partner = partnerData[idx];\n                        if (remainingAmounts[partner.number] >= denomination) {\n                            partner.bills[denomination]++;\n                            remainingAmounts[partner.number] -= denomination;\n                            distributed = true;\n                        }\n                    }\n                }\n            }\n            \n            // Generate bills text and formatted output\n            partnerData.forEach(partner => {\n                const billsText = [];\n                for (const denom of [20, 10, 5, 1]) {\n                    if (partner.bills[denom] > 0) {\n                        billsText.push(`${partner.bills[denom]}x$${denom}`);\n                    }\n                }\n                \n                partner.bills_text = billsText.join(\',\');\n                partner.formatted_output = `Partner Name: ${partner.name} | #: ${partner.number} | ` +\n                    `Hours: ${partner.hours} | Exact: $${partner.exact_tip_amount.toFixed(2)} | ` +\n                    `Cash: $${partner.tip_amount} | Bills: ${partner.bills_text}`;\n            });\n            \n            // Save distributed tips to state\n            state.distributedTips = partnerData;\n            state.tipCalculated = true;\n            \n            // Update UI\n            calculationDetails.textContent = `Total Tips: $${tipAmount.toFixed(2)} ÷ Total Hours: ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour`;\n            \n            // Calculate total bills needed\n            const totalBills = {20: 0, 10: 0, 5: 0, 1: 0};\n            partnerData.forEach(partner => {\n                totalBills[20] += partner.bills[20];\n                totalBills[10] += partner.bills[10];\n                totalBills[5] += partner.bills[5];\n                totalBills[1] += partner.bills[1];\n            });\n            \n            // Update bills needed summary\n            document.getElementById(\'twentyCount\').textContent = totalBills[20];\n            document.getElementById(\'tenCount\').textContent = totalBills[10];\n            document.getElementById(\'fiveCount\').textContent = totalBills[5];\n            document.getElementById(\'oneCount\').textContent = totalBills[1];\n            \n            // Render tip distribution cards\n            tipDistributionList.innerHTML = \'\';\n            let copyPasteText = \'\';\n            \n            partnerData.forEach(partner => {\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${partner.exact_tip_amount.toFixed(2)}`;\n                \n                // Create partner card\n                const card = document.createElement(\'div\');\n                card.classList.add(\'partner-card\');\n                \n                // Split bills text into chips\n                const billChips = partner.bills_text.split(\',\').map(bill => \n                    `<span class="bill-chip">${bill.trim()}</span>`\n                ).join(\' \');\n                \n                card.innerHTML = `\n                    <div class="partner-card-header">\n                        <h4 class="partner-card-name">${partner.name}</h4>\n                        <span class="partner-card-amount">$${partner.tip_amount}</span>\n                    </div>\n                    <div class="mt-1">\n                        <span class="text-sm">${partner.hours} hours</span>\n                    </div>\n                    <div class="calculation-box">\n                        ${calculation} → $${partner.tip_amount}\n                    </div>\n                    <div class="bills-box">\n                        <div class="flex flex-wrap gap-1">\n                            ${billChips}\n                        </div>\n                    </div>\n                `;\n                \n                tipDistributionList.appendChild(card);\n                copyPasteText += partner.formatted_output + \'\\n\';\n            });\n            \n            // Update copy-paste format\n            copyPasteFormat.textContent = copyPasteText;\n            \n            // Show tip distribution section\n            tipDistributionSection.classList.remove(\'hidden\');\n            \n            // Update download links for the table\n            updateDownloadLinks();\n            \n            // Increment week counter for next allocation\n            state.weekCounter++;\n            \n            // Scroll to tip distribution section\n            tipDistributionSection.scrollIntoView({behavior: \'smooth\'});\n        });\n\n        // Save to History button\n        saveToHistoryBtn.addEventListener(\'click\', function() {\n            if (!state.distributedTips) return;\n            \n            const distribution = {\n                week: state.weekCounter - 1,\n                total_amount: state.totalTipAmount,\n                total_hours: state.totalHours,\n                partners: state.distributedTips\n            };\n            \n            state.tipsHistory.push(distribution);\n            \n            // Update UI\n            updateHistoryList();\n            historySection.classList.remove(\'hidden\');\n            \n            // Show success message\n            alert(\'Distribution saved to history!\');\n        });\n\n        // Functions for updating the UI\n        function updateDownloadLinks() {\n            if (state.ocrResult) {\n                const ocrBlob = new Blob([state.ocrResult], {type: \'text/plain\'});\n                downloadOcrBtn.href = URL.createObjectURL(ocrBlob);\n            }\n            \n            if (state.tipCalculated && state.distributedTips) {\n                const tableHtml = generateHtmlTable();\n                const tableBlob = new Blob([tableHtml], {type: \'text/html\'});\n                downloadTableBtn.href = URL.createObjectURL(tableBlob);\n                downloadTableBtn.classList.remove(\'hidden\');\n            } else {\n                downloadTableBtn.classList.add(\'hidden\');\n            }\n        }\n\n        function updateHistoryList() {\n            historyList.innerHTML = \'\';\n            \n            state.tipsHistory.forEach((dist, i) => {\n                const historyItem = document.createElement(\'div\');\n                historyItem.innerHTML = `\n                    <div class="custom-card mb-4">\n                        <h4 class="font-bold starbucks-green">Week ${dist.week}</h4>\n                        <p>Total: $${dist.total_amount.toFixed(2)} for ${dist.total_hours.toFixed(2)} hours</p>\n                        <div class="mt-2 pl-4">\n                            ${dist.partners.map(partner => \n                                `<div class="mb-1">\n                                    ${partner.name} | #${partner.number} | ${partner.hours} hours | $${partner.tip_amount} | ${partner.bills_text}\n                                </div>`\n                            ).join(\'\')}\n                        </div>\n                    </div>\n                `;\n                historyList.appendChild(historyItem);\n            });\n        }\n\n        function generateHtmlTable() {\n            const tipData = state.distributedTips.map(partner => {\n                const exactAmount = partner.exact_tip_amount;\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${exactAmount.toFixed(2)}`;\n                \n                return {\n                    "Partner Name": partner.name,\n                    "#": partner.number,\n                    "Hours": partner.hours,\n                    "Calculation": calculation,\n                    "Cash Amount": `$${partner.tip_amount}`,\n                    "Bills": partner.bills_text\n                };\n            });\n            \n            let tableRows = \'\';\n            tipData.forEach(partner => {\n                tableRows += `\n                    <tr>\n                        <td>${partner[\'#\']}</td>\n                        <td>${partner[\'Partner Name\']}</td>\n                        <td>${partner[\'Hours\']}</td>\n                        <td class="calculation">${partner[\'Calculation\']}</td>\n                        <td class="cash-amount">${partner[\'Cash Amount\']}</td>\n                        <td>${partner[\'Bills\']}</td>\n                    </tr>\n                `;\n            });\n            \n            return `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <meta charset="UTF-8">\n                    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                    <title>TipJar Results</title>\n                    <style>\n                        body {\n                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;\n                            margin: 20px;\n                            padding: 0;\n                            color: #333;\n                        }\n                        h1 {\n                            color: #00704A;\n                            text-align: center;\n                        }\n                        .info {\n                            margin: 10px 0;\n                            background-color: #f8f9fa;\n                            padding: 10px;\n                            border-radius: 8px;\n                        }\n                        table {\n                            width: 100%;\n                            border-collapse: collapse;\n                            margin-top: 20px;\n                            border-radius: 8px;\n                            overflow: hidden;\n                        }\n                        th, td {\n                            border: 1px solid #ddd;\n                            padding: 12px 8px;\n                            text-align: left;\n                        }\n                        th {\n                            background-color: #00704A;\n                            color: white;\n                        }\n                        tr:nth-child(even) {\n                            background-color: #f2f2f2;\n                        }\n                        .calculation {\n                            color: #666;\n                            font-size: 0.9em;\n                        }\n                        .cash-amount {\n                            font-weight: bold;\n                            color: #00704A;\n                        }\n                        @media (max-width: 600px) {\n                            th, td {\n                                padding: 8px 4px;\n                                font-size: 14px;\n                            }\n                        }\n                    </style>\n                </head>\n                <body>\n                    <h1>Tip Distribution Results</h1>\n                    <div class="info">\n                        <p><strong>Hourly Rate Calculation:</strong> $${state.totalTipAmount.toFixed(2)} ÷ ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour</p>\n                        <p><strong>Bills Needed:</strong> ${totalBills[20]} × $20, ${totalBills[10]} × $10, ${totalBills[5]} × $5, ${totalBills[1]} × $1</p>\n                    </div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Partner Name</th>\n                                <th>Hours</th>\n                                <th>Calculation</th>\n                                <th>Cash</th>\n                                <th>Bills</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${tableRows}\n                        </tbody>\n                    </table>\n                </body>\n                </html>\n            `;\n        }\n\n        // Manual partner input handling\n        function renderManualPartnerInputs() {\n            const count = parseInt(numPartners.value) || 3;\n            manualPartnerInputs.innerHTML = \'\';\n            \n            for (let i = 0; i < count; i++) {\n                const partnerDiv = document.createElement(\'div\');\n                partnerDiv.classList.add(\'mb-6\', \'p-3\', \'border\', \'rounded-lg\');\n                partnerDiv.innerHTML = `\n                    <h4 class="mb-2 starbucks-green">Partner ${i+1}</h4>\n                    <div class="mb-2">\n                        <label for="name_${i}" class="block mb-1">Name:</label>\n                        <input type="text" id="name_${i}" class="w-full">\n                    </div>\n                    <div>\n                        <label for="hours_${i}" class="block mb-1">Hours:</label>\n                        <input type="number" id="hours_${i}" min="0" step="0.25" class="w-full">\n                    </div>\n                `;\n                manualPartnerInputs.appendChild(partnerDiv);\n            }\n        }\n\n        // Save manual partner data\n        saveManualPartners.addEventListener(\'click\', function() {\n            const count = parseInt(numPartners.value) || 3;\n            const manualPartnerData = [];\n            \n            for (let i = 0; i < count; i++) {\n                const name = document.getElementById(`name_${i}`).value;\n                const hours = parseFloat(document.getElementById(`hours_${i}`).value) || 0;\n                \n                if (name && hours > 0) {\n                    manualPartnerData.push({\n                        name: name,\n                        number: i + 1,\n                        hours: hours\n                    });\n                }\n            }\n            \n            if (manualPartnerData.length === 0) {\n                alert(\'Please provide valid names and hours for at least one partner.\');\n                return;\n            }\n            \n            // Update state\n            state.partnerData = manualPartnerData;\n            state.totalHours = manualPartnerData.reduce((sum, partner) => sum + partner.hours, 0);\n            \n            // Update UI\n            totalHours.textContent = `Total Hours: ${state.totalHours}`;\n            partnerList.innerHTML = \'\';\n            \n            manualPartnerData.forEach(partner => {\n                const partnerEl = document.createElement(\'div\');\n                partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                partnerList.appendChild(partnerEl);\n            });\n            \n            // Show partner data section\n            partnerDataSection.classList.remove(\'hidden\');\n            \n            // Scroll to partner data section\n            partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n            \n            // Close the collapsible\n            const collapsible = document.querySelector(\'.collapsible\');\n            if (collapsible.classList.contains(\'active\')) {\n                collapsible.click();\n            }\n        });\n    </script>\n', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = ce519c1100dd48e943af400177ed649bf9be470122c01ef9c9b427c62d73691b7c2a1312fd882c5cb27f15625db27d0ae638b6bbaed5b84952b058f77a568b9f_0
2025-05-31 11:15:24,211 - semgrep.rule_match - DEBUG - match_key = ('\n        // Add the following JavaScript to handle the drag and drop functionality\n        const fileDropArea = document.querySelector(\'.file-drop-area\');\n        const fileInput = document.getElementById(\'imageUpload\');\n        \n        [\'dragenter\', \'dragover\', \'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n        \n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        \n        [\'dragenter\', \'dragover\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, highlight, false);\n        });\n        \n        [\'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, unhighlight, false);\n        });\n        \n        function highlight() {\n            fileDropArea.classList.add(\'dragover\');\n        }\n        \n        function unhighlight() {\n            fileDropArea.classList.remove(\'dragover\');\n        }\n        \n        fileDropArea.addEventListener(\'drop\', handleDrop, false);\n        \n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            fileInput.files = files;\n            \n            // Trigger the change event\n            const event = new Event(\'change\', { bubbles: true });\n            fileInput.dispatchEvent(event);\n        }\n\n        // Global state management (similar to Streamlit\'s session state)\n        const state = {\n            ocrResult: null,\n            imageData: null,\n            partnerData: null,\n            totalHours: 0,\n            tipCalculated: false,\n            weekCounter: 1,\n            tipsHistory: [],\n            hourlyRate: 0,\n            totalTipAmount: 0,\n            distributedTips: null\n        };\n\n        // Gemini API settings\n        const GEMINI_API_KEY = "AIzaSyCi_m_KbY-a36tvHl09C1Mtyx_K38GuokY";\n        const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";\n\n        // DOM Elements\n        const uploadSection = document.getElementById(\'uploadSection\');\n        const imageUpload = document.getElementById(\'imageUpload\');\n        const selectedFileName = document.getElementById(\'selectedFileName\');\n        const processButton = document.getElementById(\'processButton\');\n        const previewSection = document.getElementById(\'previewSection\');\n        const previewImage = document.getElementById(\'previewImage\');\n        const extractedTextSection = document.getElementById(\'extractedTextSection\');\n        const extractedText = document.getElementById(\'extractedText\');\n        const extractPartnerDataBtn = document.getElementById(\'extractPartnerDataBtn\');\n        const partnerDataSection = document.getElementById(\'partnerDataSection\');\n        const totalHours = document.getElementById(\'totalHours\');\n        const partnerList = document.getElementById(\'partnerList\');\n        const totalTipAmount = document.getElementById(\'totalTipAmount\');\n        const calculateTipsBtn = document.getElementById(\'calculateTipsBtn\');\n        const tipDistributionSection = document.getElementById(\'tipDistributionSection\');\n        const hourlyRateInfo = document.getElementById(\'hourlyRateInfo\');\n        const calculationDetails = document.getElementById(\'calculationDetails\');\n        const tipDistributionList = document.getElementById(\'tipDistributionList\');\n        const copyPasteFormat = document.getElementById(\'copyPasteFormat\');\n        const saveToHistoryBtn = document.getElementById(\'saveToHistoryBtn\');\n        const historySection = document.getElementById(\'historySection\');\n        const historyList = document.getElementById(\'historyList\');\n        const downloadSection = document.getElementById(\'downloadSection\');\n        const downloadOcrBtn = document.getElementById(\'downloadOcrBtn\');\n        const downloadTableBtn = document.getElementById(\'downloadTableBtn\');\n        const numPartners = document.getElementById(\'numPartners\');\n        const manualPartnerInputs = document.getElementById(\'manualPartnerInputs\');\n        const saveManualPartners = document.getElementById(\'saveManualPartners\');\n\n        // Event Listeners\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Set up collapsible sections\n            const collapsibles = document.getElementsByClassName(\'collapsible\');\n            for (let i = 0; i < collapsibles.length; i++) {\n                collapsibles[i].addEventListener(\'click\', function() {\n                    this.classList.toggle(\'active\');\n                    const content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    } else {\n                        content.style.maxHeight = content.scrollHeight + \'px\';\n                    }\n                });\n            }\n\n            // Set up number of partners change event\n            numPartners.addEventListener(\'change\', renderManualPartnerInputs);\n            renderManualPartnerInputs(); // Initial render\n        });\n\n        // File upload handling\n        imageUpload.addEventListener(\'change\', function(e) {\n            if (this.files.length > 0) {\n                const file = this.files[0];\n                selectedFileName.textContent = file.name;\n                processButton.classList.remove(\'opacity-50\', \'cursor-not-allowed\');\n                processButton.disabled = false;\n                \n                // Create image preview\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    state.imageData = e.target.result;\n                }\n                reader.readAsDataURL(file);\n            }\n        });\n\n        // Helper function to convert base64 to correct format for Gemini API\n        function convertBase64ForGemini(base64String) {\n            // Remove data URL prefix if present\n            const base64Data = base64String.includes(\',\') \n                ? base64String.split(\',\')[1] \n                : base64String;\n            \n            return base64Data;\n        }\n\n        // Process button with Gemini API - now combines both steps\n        processButton.addEventListener(\'click\', async function() {\n            if (!state.imageData) return;\n            \n            // Show loading state\n            this.textContent = \'Processing Tip Sheet...\';\n            this.disabled = true;\n            \n            try {\n                // Step 1: Process the image\n                const base64Image = convertBase64ForGemini(state.imageData);\n                \n                const promptText = "Please analyze this image and: " +\n                    "1. Extract all visible text, especially focusing on names and hours worked " +\n                    "2. Maintain the original formatting and structure " +\n                    "3. Preserve any important visual context " +\n                    "4. Make sure to clearly identify all partner/employee names and their corresponding hours " +\n                    "Extract and format the text clearly:";\n                \n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: promptText },\n                                {\n                                    inline_data: {\n                                        mime_type: "image/jpeg",\n                                        data: base64Image\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.4,\n                        topK: 32,\n                        topP: 1,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (responseData.candidates && \n                    responseData.candidates[0] && \n                    responseData.candidates[0].content && \n                    responseData.candidates[0].content.parts && \n                    responseData.candidates[0].content.parts[0] && \n                    responseData.candidates[0].content.parts[0].text) {\n                    \n                    state.ocrResult = responseData.candidates[0].content.parts[0].text;\n                    \n                    // Show preview\n                    previewSection.classList.remove(\'hidden\');\n                    previewImage.src = state.imageData;\n                    \n                    // Store extracted text but don\'t display the section\n                    extractedText.textContent = state.ocrResult;\n                    \n                    // Show download option for OCR text\n                    downloadSection.classList.remove(\'hidden\');\n                    updateDownloadLinks();\n                    \n                    // Step 2: Automatically extract partner data\n                    this.textContent = \'Extracting Partner Data...\';\n                    const success = await extractPartnerData();\n                    \n                    if (success) {\n                        // Hide extractedTextSection if it\'s visible (in case it was shown before)\n                        extractedTextSection.classList.add(\'hidden\');\n                    }\n                    \n                } else {\n                    throw new Error(\'Couldn\\\'t extract text from the API response\');\n                }\n            } catch (error) {\n                console.error(\'Error processing with Gemini API:\', error);\n                alert(`Error processing image: ${error.message || \'Unknown error\'}`);\n            } finally {\n                // Reset process button\n                processButton.textContent = \'Process\';\n                processButton.disabled = false;\n            }\n        });\n\n        // Extract partner data function (now called automatically by the process button)\n        async function extractPartnerData() {\n            if (!state.ocrResult) return false;\n            \n            try {\n                // Prepare the prompt for partner data extraction\n                const extractionPrompt = \n                    `From the following text, extract partner names and their hours worked. Format as JSON:\\n\\n` +\n                    `${state.ocrResult}\\n\\n` +\n                    `Return a JSON array of objects with \'name\' and \'hours\' fields. Example:\n                    [\n                        {"name": "John Smith", "hours": 32.5},\n                        {"name": "Jane Doe", "hours": 28.75}\n                    ]\n                    \n                    Only include valid partners with hours. Output ONLY the JSON array, nothing else.`;\n                \n                // Prepare the request payload\n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: extractionPrompt }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.2,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                // Make the API call to extract partner data\n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                const partnerDataText = responseData.candidates[0].content.parts[0].text;\n                \n                // Extract JSON from the response\n                const jsonMatch = partnerDataText.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n                let partnerData = [];\n                \n                if (jsonMatch) {\n                    try {\n                        partnerData = JSON.parse(jsonMatch[0]);\n                    } catch (e) {\n                        throw new Error(\'Failed to parse JSON from API response\');\n                    }\n                } else {\n                    throw new Error(\'No valid JSON found in the API response\');\n                }\n                \n                // Add partner numbers\n                partnerData.forEach((partner, index) => {\n                    partner.number = index + 1;\n                });\n                \n                // Calculate total hours\n                state.totalHours = partnerData.reduce((sum, partner) => sum + parseFloat(partner.hours), 0);\n                state.partnerData = partnerData;\n                \n                // Update UI\n                totalHours.textContent = `Total Hours: ${state.totalHours}`;\n                partnerList.innerHTML = \'\';\n                \n                partnerData.forEach(partner => {\n                    const partnerEl = document.createElement(\'div\');\n                    partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                    partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                    partnerList.appendChild(partnerEl);\n                });\n                \n                // Show partner data section\n                partnerDataSection.classList.remove(\'hidden\');\n                \n                // Scroll to partner data section\n                partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n                \n                return true;\n            } catch (error) {\n                console.error(\'Error extracting partner data:\', error);\n                alert(`Error extracting partner data: ${error.message || \'Unknown error\'}`);\n                return false;\n            }\n        }\n\n        // Calculate Tips button\n        calculateTipsBtn.addEventListener(\'click\', function() {\n            const tipAmount = parseFloat(totalTipAmount.value);\n            if (isNaN(tipAmount) || tipAmount <= 0) {\n                alert(\'Please enter a valid tip amount.\');\n                return;\n            }\n            \n            if (!state.partnerData || state.partnerData.length === 0) {\n                alert(\'No partner data available.\');\n                return;\n            }\n            \n            // Calculate hourly rate (truncate to 2 decimal places)\n            state.totalTipAmount = tipAmount;\n            state.hourlyRate = Math.floor((tipAmount / state.totalHours) * 100) / 100;\n            \n            // Calculate individual tips with bill distribution\n            const partnerData = JSON.parse(JSON.stringify(state.partnerData)); // Deep copy\n            const denominations = [20, 10, 5, 1];\n            const startIndex = (state.weekCounter - 1) % partnerData.length;\n            const remainingAmounts = {};\n            \n            // Calculate exact and rounded tip amounts\n            partnerData.forEach(partner => {\n                const exactAmount = partner.hours * state.hourlyRate;\n                partner.raw_tip_amount = exactAmount;\n                partner.exact_tip_amount = exactAmount;\n                partner.tip_amount = Math.round(exactAmount);\n                partner.bills = {20: 0, 10: 0, 5: 0, 1: 0};\n                remainingAmounts[partner.number] = partner.tip_amount;\n            });\n            \n            // Distribute bills\n            for (const denomination of denominations) {\n                // Create order of partners starting with rotation partner\n                const partnerOrder = [];\n                for (let i = 0; i < partnerData.length; i++) {\n                    partnerOrder.push((startIndex + i) % partnerData.length);\n                }\n                \n                // Distribute bills of this denomination\n                let distributed = true;\n                while (distributed) {\n                    distributed = false;\n                    for (const idx of partnerOrder) {\n                        const partner = partnerData[idx];\n                        if (remainingAmounts[partner.number] >= denomination) {\n                            partner.bills[denomination]++;\n                            remainingAmounts[partner.number] -= denomination;\n                            distributed = true;\n                        }\n                    }\n                }\n            }\n            \n            // Generate bills text and formatted output\n            partnerData.forEach(partner => {\n                const billsText = [];\n                for (const denom of [20, 10, 5, 1]) {\n                    if (partner.bills[denom] > 0) {\n                        billsText.push(`${partner.bills[denom]}x$${denom}`);\n                    }\n                }\n                \n                partner.bills_text = billsText.join(\',\');\n                partner.formatted_output = `Partner Name: ${partner.name} | #: ${partner.number} | ` +\n                    `Hours: ${partner.hours} | Exact: $${partner.exact_tip_amount.toFixed(2)} | ` +\n                    `Cash: $${partner.tip_amount} | Bills: ${partner.bills_text}`;\n            });\n            \n            // Save distributed tips to state\n            state.distributedTips = partnerData;\n            state.tipCalculated = true;\n            \n            // Update UI\n            calculationDetails.textContent = `Total Tips: $${tipAmount.toFixed(2)} ÷ Total Hours: ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour`;\n            \n            // Calculate total bills needed\n            const totalBills = {20: 0, 10: 0, 5: 0, 1: 0};\n            partnerData.forEach(partner => {\n                totalBills[20] += partner.bills[20];\n                totalBills[10] += partner.bills[10];\n                totalBills[5] += partner.bills[5];\n                totalBills[1] += partner.bills[1];\n            });\n            \n            // Update bills needed summary\n            document.getElementById(\'twentyCount\').textContent = totalBills[20];\n            document.getElementById(\'tenCount\').textContent = totalBills[10];\n            document.getElementById(\'fiveCount\').textContent = totalBills[5];\n            document.getElementById(\'oneCount\').textContent = totalBills[1];\n            \n            // Render tip distribution cards\n            tipDistributionList.innerHTML = \'\';\n            let copyPasteText = \'\';\n            \n            partnerData.forEach(partner => {\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${partner.exact_tip_amount.toFixed(2)}`;\n                \n                // Create partner card\n                const card = document.createElement(\'div\');\n                card.classList.add(\'partner-card\');\n                \n                // Split bills text into chips\n                const billChips = partner.bills_text.split(\',\').map(bill => \n                    `<span class="bill-chip">${bill.trim()}</span>`\n                ).join(\' \');\n                \n                card.innerHTML = `\n                    <div class="partner-card-header">\n                        <h4 class="partner-card-name">${partner.name}</h4>\n                        <span class="partner-card-amount">$${partner.tip_amount}</span>\n                    </div>\n                    <div class="mt-1">\n                        <span class="text-sm">${partner.hours} hours</span>\n                    </div>\n                    <div class="calculation-box">\n                        ${calculation} → $${partner.tip_amount}\n                    </div>\n                    <div class="bills-box">\n                        <div class="flex flex-wrap gap-1">\n                            ${billChips}\n                        </div>\n                    </div>\n                `;\n                \n                tipDistributionList.appendChild(card);\n                copyPasteText += partner.formatted_output + \'\\n\';\n            });\n            \n            // Update copy-paste format\n            copyPasteFormat.textContent = copyPasteText;\n            \n            // Show tip distribution section\n            tipDistributionSection.classList.remove(\'hidden\');\n            \n            // Update download links for the table\n            updateDownloadLinks();\n            \n            // Increment week counter for next allocation\n            state.weekCounter++;\n            \n            // Scroll to tip distribution section\n            tipDistributionSection.scrollIntoView({behavior: \'smooth\'});\n        });\n\n        // Save to History button\n        saveToHistoryBtn.addEventListener(\'click\', function() {\n            if (!state.distributedTips) return;\n            \n            const distribution = {\n                week: state.weekCounter - 1,\n                total_amount: state.totalTipAmount,\n                total_hours: state.totalHours,\n                partners: state.distributedTips\n            };\n            \n            state.tipsHistory.push(distribution);\n            \n            // Update UI\n            updateHistoryList();\n            historySection.classList.remove(\'hidden\');\n            \n            // Show success message\n            alert(\'Distribution saved to history!\');\n        });\n\n        // Functions for updating the UI\n        function updateDownloadLinks() {\n            if (state.ocrResult) {\n                const ocrBlob = new Blob([state.ocrResult], {type: \'text/plain\'});\n                downloadOcrBtn.href = URL.createObjectURL(ocrBlob);\n            }\n            \n            if (state.tipCalculated && state.distributedTips) {\n                const tableHtml = generateHtmlTable();\n                const tableBlob = new Blob([tableHtml], {type: \'text/html\'});\n                downloadTableBtn.href = URL.createObjectURL(tableBlob);\n                downloadTableBtn.classList.remove(\'hidden\');\n            } else {\n                downloadTableBtn.classList.add(\'hidden\');\n            }\n        }\n\n        function updateHistoryList() {\n            historyList.innerHTML = \'\';\n            \n            state.tipsHistory.forEach((dist, i) => {\n                const historyItem = document.createElement(\'div\');\n                historyItem.innerHTML = `\n                    <div class="custom-card mb-4">\n                        <h4 class="font-bold starbucks-green">Week ${dist.week}</h4>\n                        <p>Total: $${dist.total_amount.toFixed(2)} for ${dist.total_hours.toFixed(2)} hours</p>\n                        <div class="mt-2 pl-4">\n                            ${dist.partners.map(partner => \n                                `<div class="mb-1">\n                                    ${partner.name} | #${partner.number} | ${partner.hours} hours | $${partner.tip_amount} | ${partner.bills_text}\n                                </div>`\n                            ).join(\'\')}\n                        </div>\n                    </div>\n                `;\n                historyList.appendChild(historyItem);\n            });\n        }\n\n        function generateHtmlTable() {\n            const tipData = state.distributedTips.map(partner => {\n                const exactAmount = partner.exact_tip_amount;\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${exactAmount.toFixed(2)}`;\n                \n                return {\n                    "Partner Name": partner.name,\n                    "#": partner.number,\n                    "Hours": partner.hours,\n                    "Calculation": calculation,\n                    "Cash Amount": `$${partner.tip_amount}`,\n                    "Bills": partner.bills_text\n                };\n            });\n            \n            let tableRows = \'\';\n            tipData.forEach(partner => {\n                tableRows += `\n                    <tr>\n                        <td>${partner[\'#\']}</td>\n                        <td>${partner[\'Partner Name\']}</td>\n                        <td>${partner[\'Hours\']}</td>\n                        <td class="calculation">${partner[\'Calculation\']}</td>\n                        <td class="cash-amount">${partner[\'Cash Amount\']}</td>\n                        <td>${partner[\'Bills\']}</td>\n                    </tr>\n                `;\n            });\n            \n            return `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <meta charset="UTF-8">\n                    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                    <title>TipJar Results</title>\n                    <style>\n                        body {\n                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;\n                            margin: 20px;\n                            padding: 0;\n                            color: #333;\n                        }\n                        h1 {\n                            color: #00704A;\n                            text-align: center;\n                        }\n                        .info {\n                            margin: 10px 0;\n                            background-color: #f8f9fa;\n                            padding: 10px;\n                            border-radius: 8px;\n                        }\n                        table {\n                            width: 100%;\n                            border-collapse: collapse;\n                            margin-top: 20px;\n                            border-radius: 8px;\n                            overflow: hidden;\n                        }\n                        th, td {\n                            border: 1px solid #ddd;\n                            padding: 12px 8px;\n                            text-align: left;\n                        }\n                        th {\n                            background-color: #00704A;\n                            color: white;\n                        }\n                        tr:nth-child(even) {\n                            background-color: #f2f2f2;\n                        }\n                        .calculation {\n                            color: #666;\n                            font-size: 0.9em;\n                        }\n                        .cash-amount {\n                            font-weight: bold;\n                            color: #00704A;\n                        }\n                        @media (max-width: 600px) {\n                            th, td {\n                                padding: 8px 4px;\n                                font-size: 14px;\n                            }\n                        }\n                    </style>\n                </head>\n                <body>\n                    <h1>Tip Distribution Results</h1>\n                    <div class="info">\n                        <p><strong>Hourly Rate Calculation:</strong> $${state.totalTipAmount.toFixed(2)} ÷ ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour</p>\n                        <p><strong>Bills Needed:</strong> ${totalBills[20]} × $20, ${totalBills[10]} × $10, ${totalBills[5]} × $5, ${totalBills[1]} × $1</p>\n                    </div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Partner Name</th>\n                                <th>Hours</th>\n                                <th>Calculation</th>\n                                <th>Cash</th>\n                                <th>Bills</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${tableRows}\n                        </tbody>\n                    </table>\n                </body>\n                </html>\n            `;\n        }\n\n        // Manual partner input handling\n        function renderManualPartnerInputs() {\n            const count = parseInt(numPartners.value) || 3;\n            manualPartnerInputs.innerHTML = \'\';\n            \n            for (let i = 0; i < count; i++) {\n                const partnerDiv = document.createElement(\'div\');\n                partnerDiv.classList.add(\'mb-6\', \'p-3\', \'border\', \'rounded-lg\');\n                partnerDiv.innerHTML = `\n                    <h4 class="mb-2 starbucks-green">Partner ${i+1}</h4>\n                    <div class="mb-2">\n                        <label for="name_${i}" class="block mb-1">Name:</label>\n                        <input type="text" id="name_${i}" class="w-full">\n                    </div>\n                    <div>\n                        <label for="hours_${i}" class="block mb-1">Hours:</label>\n                        <input type="number" id="hours_${i}" min="0" step="0.25" class="w-full">\n                    </div>\n                `;\n                manualPartnerInputs.appendChild(partnerDiv);\n            }\n        }\n\n        // Save manual partner data\n        saveManualPartners.addEventListener(\'click\', function() {\n            const count = parseInt(numPartners.value) || 3;\n            const manualPartnerData = [];\n            \n            for (let i = 0; i < count; i++) {\n                const name = document.getElementById(`name_${i}`).value;\n                const hours = parseFloat(document.getElementById(`hours_${i}`).value) || 0;\n                \n                if (name && hours > 0) {\n                    manualPartnerData.push({\n                        name: name,\n                        number: i + 1,\n                        hours: hours\n                    });\n                }\n            }\n            \n            if (manualPartnerData.length === 0) {\n                alert(\'Please provide valid names and hours for at least one partner.\');\n                return;\n            }\n            \n            // Update state\n            state.partnerData = manualPartnerData;\n            state.totalHours = manualPartnerData.reduce((sum, partner) => sum + partner.hours, 0);\n            \n            // Update UI\n            totalHours.textContent = `Total Hours: ${state.totalHours}`;\n            partnerList.innerHTML = \'\';\n            \n            manualPartnerData.forEach(partner => {\n                const partnerEl = document.createElement(\'div\');\n                partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                partnerList.appendChild(partnerEl);\n            });\n            \n            // Show partner data section\n            partnerDataSection.classList.remove(\'hidden\');\n            \n            // Scroll to partner data section\n            partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n            \n            // Close the collapsible\n            const collapsible = document.querySelector(\'.collapsible\');\n            if (collapsible.classList.contains(\'active\')) {\n                collapsible.click();\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Add the following JavaScript to handle the drag and drop functionality\n        const fileDropArea = document.querySelector(\'.file-drop-area\');\n        const fileInput = document.getElementById(\'imageUpload\');\n        \n        [\'dragenter\', \'dragover\', \'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n        \n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        \n        [\'dragenter\', \'dragover\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, highlight, false);\n        });\n        \n        [\'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, unhighlight, false);\n        });\n        \n        function highlight() {\n            fileDropArea.classList.add(\'dragover\');\n        }\n        \n        function unhighlight() {\n            fileDropArea.classList.remove(\'dragover\');\n        }\n        \n        fileDropArea.addEventListener(\'drop\', handleDrop, false);\n        \n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            fileInput.files = files;\n            \n            // Trigger the change event\n            const event = new Event(\'change\', { bubbles: true });\n            fileInput.dispatchEvent(event);\n        }\n\n        // Global state management (similar to Streamlit\'s session state)\n        const state = {\n            ocrResult: null,\n            imageData: null,\n            partnerData: null,\n            totalHours: 0,\n            tipCalculated: false,\n            weekCounter: 1,\n            tipsHistory: [],\n            hourlyRate: 0,\n            totalTipAmount: 0,\n            distributedTips: null\n        };\n\n        // Gemini API settings\n        const GEMINI_API_KEY = "AIzaSyCi_m_KbY-a36tvHl09C1Mtyx_K38GuokY";\n        const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";\n\n        // DOM Elements\n        const uploadSection = document.getElementById(\'uploadSection\');\n        const imageUpload = document.getElementById(\'imageUpload\');\n        const selectedFileName = document.getElementById(\'selectedFileName\');\n        const processButton = document.getElementById(\'processButton\');\n        const previewSection = document.getElementById(\'previewSection\');\n        const previewImage = document.getElementById(\'previewImage\');\n        const extractedTextSection = document.getElementById(\'extractedTextSection\');\n        const extractedText = document.getElementById(\'extractedText\');\n        const extractPartnerDataBtn = document.getElementById(\'extractPartnerDataBtn\');\n        const partnerDataSection = document.getElementById(\'partnerDataSection\');\n        const totalHours = document.getElementById(\'totalHours\');\n        const partnerList = document.getElementById(\'partnerList\');\n        const totalTipAmount = document.getElementById(\'totalTipAmount\');\n        const calculateTipsBtn = document.getElementById(\'calculateTipsBtn\');\n        const tipDistributionSection = document.getElementById(\'tipDistributionSection\');\n        const hourlyRateInfo = document.getElementById(\'hourlyRateInfo\');\n        const calculationDetails = document.getElementById(\'calculationDetails\');\n        const tipDistributionList = document.getElementById(\'tipDistributionList\');\n        const copyPasteFormat = document.getElementById(\'copyPasteFormat\');\n        const saveToHistoryBtn = document.getElementById(\'saveToHistoryBtn\');\n        const historySection = document.getElementById(\'historySection\');\n        const historyList = document.getElementById(\'historyList\');\n        const downloadSection = document.getElementById(\'downloadSection\');\n        const downloadOcrBtn = document.getElementById(\'downloadOcrBtn\');\n        const downloadTableBtn = document.getElementById(\'downloadTableBtn\');\n        const numPartners = document.getElementById(\'numPartners\');\n        const manualPartnerInputs = document.getElementById(\'manualPartnerInputs\');\n        const saveManualPartners = document.getElementById(\'saveManualPartners\');\n\n        // Event Listeners\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Set up collapsible sections\n            const collapsibles = document.getElementsByClassName(\'collapsible\');\n            for (let i = 0; i < collapsibles.length; i++) {\n                collapsibles[i].addEventListener(\'click\', function() {\n                    this.classList.toggle(\'active\');\n                    const content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    } else {\n                        content.style.maxHeight = content.scrollHeight + \'px\';\n                    }\n                });\n            }\n\n            // Set up number of partners change event\n            numPartners.addEventListener(\'change\', renderManualPartnerInputs);\n            renderManualPartnerInputs(); // Initial render\n        });\n\n        // File upload handling\n        imageUpload.addEventListener(\'change\', function(e) {\n            if (this.files.length > 0) {\n                const file = this.files[0];\n                selectedFileName.textContent = file.name;\n                processButton.classList.remove(\'opacity-50\', \'cursor-not-allowed\');\n                processButton.disabled = false;\n                \n                // Create image preview\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    state.imageData = e.target.result;\n                }\n                reader.readAsDataURL(file);\n            }\n        });\n\n        // Helper function to convert base64 to correct format for Gemini API\n        function convertBase64ForGemini(base64String) {\n            // Remove data URL prefix if present\n            const base64Data = base64String.includes(\',\') \n                ? base64String.split(\',\')[1] \n                : base64String;\n            \n            return base64Data;\n        }\n\n        // Process button with Gemini API - now combines both steps\n        processButton.addEventListener(\'click\', async function() {\n            if (!state.imageData) return;\n            \n            // Show loading state\n            this.textContent = \'Processing Tip Sheet...\';\n            this.disabled = true;\n            \n            try {\n                // Step 1: Process the image\n                const base64Image = convertBase64ForGemini(state.imageData);\n                \n                const promptText = "Please analyze this image and: " +\n                    "1. Extract all visible text, especially focusing on names and hours worked " +\n                    "2. Maintain the original formatting and structure " +\n                    "3. Preserve any important visual context " +\n                    "4. Make sure to clearly identify all partner/employee names and their corresponding hours " +\n                    "Extract and format the text clearly:";\n                \n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: promptText },\n                                {\n                                    inline_data: {\n                                        mime_type: "image/jpeg",\n                                        data: base64Image\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.4,\n                        topK: 32,\n                        topP: 1,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (responseData.candidates && \n                    responseData.candidates[0] && \n                    responseData.candidates[0].content && \n                    responseData.candidates[0].content.parts && \n                    responseData.candidates[0].content.parts[0] && \n                    responseData.candidates[0].content.parts[0].text) {\n                    \n                    state.ocrResult = responseData.candidates[0].content.parts[0].text;\n                    \n                    // Show preview\n                    previewSection.classList.remove(\'hidden\');\n                    previewImage.src = state.imageData;\n                    \n                    // Store extracted text but don\'t display the section\n                    extractedText.textContent = state.ocrResult;\n                    \n                    // Show download option for OCR text\n                    downloadSection.classList.remove(\'hidden\');\n                    updateDownloadLinks();\n                    \n                    // Step 2: Automatically extract partner data\n                    this.textContent = \'Extracting Partner Data...\';\n                    const success = await extractPartnerData();\n                    \n                    if (success) {\n                        // Hide extractedTextSection if it\'s visible (in case it was shown before)\n                        extractedTextSection.classList.add(\'hidden\');\n                    }\n                    \n                } else {\n                    throw new Error(\'Couldn\\\'t extract text from the API response\');\n                }\n            } catch (error) {\n                console.error(\'Error processing with Gemini API:\', error);\n                alert(`Error processing image: ${error.message || \'Unknown error\'}`);\n            } finally {\n                // Reset process button\n                processButton.textContent = \'Process\';\n                processButton.disabled = false;\n            }\n        });\n\n        // Extract partner data function (now called automatically by the process button)\n        async function extractPartnerData() {\n            if (!state.ocrResult) return false;\n            \n            try {\n                // Prepare the prompt for partner data extraction\n                const extractionPrompt = \n                    `From the following text, extract partner names and their hours worked. Format as JSON:\\n\\n` +\n                    `${state.ocrResult}\\n\\n` +\n                    `Return a JSON array of objects with \'name\' and \'hours\' fields. Example:\n                    [\n                        {"name": "John Smith", "hours": 32.5},\n                        {"name": "Jane Doe", "hours": 28.75}\n                    ]\n                    \n                    Only include valid partners with hours. Output ONLY the JSON array, nothing else.`;\n                \n                // Prepare the request payload\n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: extractionPrompt }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.2,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                // Make the API call to extract partner data\n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                const partnerDataText = responseData.candidates[0].content.parts[0].text;\n                \n                // Extract JSON from the response\n                const jsonMatch = partnerDataText.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n                let partnerData = [];\n                \n                if (jsonMatch) {\n                    try {\n                        partnerData = JSON.parse(jsonMatch[0]);\n                    } catch (e) {\n                        throw new Error(\'Failed to parse JSON from API response\');\n                    }\n                } else {\n                    throw new Error(\'No valid JSON found in the API response\');\n                }\n                \n                // Add partner numbers\n                partnerData.forEach((partner, index) => {\n                    partner.number = index + 1;\n                });\n                \n                // Calculate total hours\n                state.totalHours = partnerData.reduce((sum, partner) => sum + parseFloat(partner.hours), 0);\n                state.partnerData = partnerData;\n                \n                // Update UI\n                totalHours.textContent = `Total Hours: ${state.totalHours}`;\n                partnerList.innerHTML = \'\';\n                \n                partnerData.forEach(partner => {\n                    const partnerEl = document.createElement(\'div\');\n                    partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                    partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                    partnerList.appendChild(partnerEl);\n                });\n                \n                // Show partner data section\n                partnerDataSection.classList.remove(\'hidden\');\n                \n                // Scroll to partner data section\n                partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n                \n                return true;\n            } catch (error) {\n                console.error(\'Error extracting partner data:\', error);\n                alert(`Error extracting partner data: ${error.message || \'Unknown error\'}`);\n                return false;\n            }\n        }\n\n        // Calculate Tips button\n        calculateTipsBtn.addEventListener(\'click\', function() {\n            const tipAmount = parseFloat(totalTipAmount.value);\n            if (isNaN(tipAmount) || tipAmount <= 0) {\n                alert(\'Please enter a valid tip amount.\');\n                return;\n            }\n            \n            if (!state.partnerData || state.partnerData.length === 0) {\n                alert(\'No partner data available.\');\n                return;\n            }\n            \n            // Calculate hourly rate (truncate to 2 decimal places)\n            state.totalTipAmount = tipAmount;\n            state.hourlyRate = Math.floor((tipAmount / state.totalHours) * 100) / 100;\n            \n            // Calculate individual tips with bill distribution\n            const partnerData = JSON.parse(JSON.stringify(state.partnerData)); // Deep copy\n            const denominations = [20, 10, 5, 1];\n            const startIndex = (state.weekCounter - 1) % partnerData.length;\n            const remainingAmounts = {};\n            \n            // Calculate exact and rounded tip amounts\n            partnerData.forEach(partner => {\n                const exactAmount = partner.hours * state.hourlyRate;\n                partner.raw_tip_amount = exactAmount;\n                partner.exact_tip_amount = exactAmount;\n                partner.tip_amount = Math.round(exactAmount);\n                partner.bills = {20: 0, 10: 0, 5: 0, 1: 0};\n                remainingAmounts[partner.number] = partner.tip_amount;\n            });\n            \n            // Distribute bills\n            for (const denomination of denominations) {\n                // Create order of partners starting with rotation partner\n                const partnerOrder = [];\n                for (let i = 0; i < partnerData.length; i++) {\n                    partnerOrder.push((startIndex + i) % partnerData.length);\n                }\n                \n                // Distribute bills of this denomination\n                let distributed = true;\n                while (distributed) {\n                    distributed = false;\n                    for (const idx of partnerOrder) {\n                        const partner = partnerData[idx];\n                        if (remainingAmounts[partner.number] >= denomination) {\n                            partner.bills[denomination]++;\n                            remainingAmounts[partner.number] -= denomination;\n                            distributed = true;\n                        }\n                    }\n                }\n            }\n            \n            // Generate bills text and formatted output\n            partnerData.forEach(partner => {\n                const billsText = [];\n                for (const denom of [20, 10, 5, 1]) {\n                    if (partner.bills[denom] > 0) {\n                        billsText.push(`${partner.bills[denom]}x$${denom}`);\n                    }\n                }\n                \n                partner.bills_text = billsText.join(\',\');\n                partner.formatted_output = `Partner Name: ${partner.name} | #: ${partner.number} | ` +\n                    `Hours: ${partner.hours} | Exact: $${partner.exact_tip_amount.toFixed(2)} | ` +\n                    `Cash: $${partner.tip_amount} | Bills: ${partner.bills_text}`;\n            });\n            \n            // Save distributed tips to state\n            state.distributedTips = partnerData;\n            state.tipCalculated = true;\n            \n            // Update UI\n            calculationDetails.textContent = `Total Tips: $${tipAmount.toFixed(2)} ÷ Total Hours: ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour`;\n            \n            // Calculate total bills needed\n            const totalBills = {20: 0, 10: 0, 5: 0, 1: 0};\n            partnerData.forEach(partner => {\n                totalBills[20] += partner.bills[20];\n                totalBills[10] += partner.bills[10];\n                totalBills[5] += partner.bills[5];\n                totalBills[1] += partner.bills[1];\n            });\n            \n            // Update bills needed summary\n            document.getElementById(\'twentyCount\').textContent = totalBills[20];\n            document.getElementById(\'tenCount\').textContent = totalBills[10];\n            document.getElementById(\'fiveCount\').textContent = totalBills[5];\n            document.getElementById(\'oneCount\').textContent = totalBills[1];\n            \n            // Render tip distribution cards\n            tipDistributionList.innerHTML = \'\';\n            let copyPasteText = \'\';\n            \n            partnerData.forEach(partner => {\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${partner.exact_tip_amount.toFixed(2)}`;\n                \n                // Create partner card\n                const card = document.createElement(\'div\');\n                card.classList.add(\'partner-card\');\n                \n                // Split bills text into chips\n                const billChips = partner.bills_text.split(\',\').map(bill => \n                    `<span class="bill-chip">${bill.trim()}</span>`\n                ).join(\' \');\n                \n                card.innerHTML = `\n                    <div class="partner-card-header">\n                        <h4 class="partner-card-name">${partner.name}</h4>\n                        <span class="partner-card-amount">$${partner.tip_amount}</span>\n                    </div>\n                    <div class="mt-1">\n                        <span class="text-sm">${partner.hours} hours</span>\n                    </div>\n                    <div class="calculation-box">\n                        ${calculation} → $${partner.tip_amount}\n                    </div>\n                    <div class="bills-box">\n                        <div class="flex flex-wrap gap-1">\n                            ${billChips}\n                        </div>\n                    </div>\n                `;\n                \n                tipDistributionList.appendChild(card);\n                copyPasteText += partner.formatted_output + \'\\n\';\n            });\n            \n            // Update copy-paste format\n            copyPasteFormat.textContent = copyPasteText;\n            \n            // Show tip distribution section\n            tipDistributionSection.classList.remove(\'hidden\');\n            \n            // Update download links for the table\n            updateDownloadLinks();\n            \n            // Increment week counter for next allocation\n            state.weekCounter++;\n            \n            // Scroll to tip distribution section\n            tipDistributionSection.scrollIntoView({behavior: \'smooth\'});\n        });\n\n        // Save to History button\n        saveToHistoryBtn.addEventListener(\'click\', function() {\n            if (!state.distributedTips) return;\n            \n            const distribution = {\n                week: state.weekCounter - 1,\n                total_amount: state.totalTipAmount,\n                total_hours: state.totalHours,\n                partners: state.distributedTips\n            };\n            \n            state.tipsHistory.push(distribution);\n            \n            // Update UI\n            updateHistoryList();\n            historySection.classList.remove(\'hidden\');\n            \n            // Show success message\n            alert(\'Distribution saved to history!\');\n        });\n\n        // Functions for updating the UI\n        function updateDownloadLinks() {\n            if (state.ocrResult) {\n                const ocrBlob = new Blob([state.ocrResult], {type: \'text/plain\'});\n                downloadOcrBtn.href = URL.createObjectURL(ocrBlob);\n            }\n            \n            if (state.tipCalculated && state.distributedTips) {\n                const tableHtml = generateHtmlTable();\n                const tableBlob = new Blob([tableHtml], {type: \'text/html\'});\n                downloadTableBtn.href = URL.createObjectURL(tableBlob);\n                downloadTableBtn.classList.remove(\'hidden\');\n            } else {\n                downloadTableBtn.classList.add(\'hidden\');\n            }\n        }\n\n        function updateHistoryList() {\n            historyList.innerHTML = \'\';\n            \n            state.tipsHistory.forEach((dist, i) => {\n                const historyItem = document.createElement(\'div\');\n                historyItem.innerHTML = `\n                    <div class="custom-card mb-4">\n                        <h4 class="font-bold starbucks-green">Week ${dist.week}</h4>\n                        <p>Total: $${dist.total_amount.toFixed(2)} for ${dist.total_hours.toFixed(2)} hours</p>\n                        <div class="mt-2 pl-4">\n                            ${dist.partners.map(partner => \n                                `<div class="mb-1">\n                                    ${partner.name} | #${partner.number} | ${partner.hours} hours | $${partner.tip_amount} | ${partner.bills_text}\n                                </div>`\n                            ).join(\'\')}\n                        </div>\n                    </div>\n                `;\n                historyList.appendChild(historyItem);\n            });\n        }\n\n        function generateHtmlTable() {\n            const tipData = state.distributedTips.map(partner => {\n                const exactAmount = partner.exact_tip_amount;\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${exactAmount.toFixed(2)}`;\n                \n                return {\n                    "Partner Name": partner.name,\n                    "#": partner.number,\n                    "Hours": partner.hours,\n                    "Calculation": calculation,\n                    "Cash Amount": `$${partner.tip_amount}`,\n                    "Bills": partner.bills_text\n                };\n            });\n            \n            let tableRows = \'\';\n            tipData.forEach(partner => {\n                tableRows += `\n                    <tr>\n                        <td>${partner[\'#\']}</td>\n                        <td>${partner[\'Partner Name\']}</td>\n                        <td>${partner[\'Hours\']}</td>\n                        <td class="calculation">${partner[\'Calculation\']}</td>\n                        <td class="cash-amount">${partner[\'Cash Amount\']}</td>\n                        <td>${partner[\'Bills\']}</td>\n                    </tr>\n                `;\n            });\n            \n            return `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <meta charset="UTF-8">\n                    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                    <title>TipJar Results</title>\n                    <style>\n                        body {\n                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;\n                            margin: 20px;\n                            padding: 0;\n                            color: #333;\n                        }\n                        h1 {\n                            color: #00704A;\n                            text-align: center;\n                        }\n                        .info {\n                            margin: 10px 0;\n                            background-color: #f8f9fa;\n                            padding: 10px;\n                            border-radius: 8px;\n                        }\n                        table {\n                            width: 100%;\n                            border-collapse: collapse;\n                            margin-top: 20px;\n                            border-radius: 8px;\n                            overflow: hidden;\n                        }\n                        th, td {\n                            border: 1px solid #ddd;\n                            padding: 12px 8px;\n                            text-align: left;\n                        }\n                        th {\n                            background-color: #00704A;\n                            color: white;\n                        }\n                        tr:nth-child(even) {\n                            background-color: #f2f2f2;\n                        }\n                        .calculation {\n                            color: #666;\n                            font-size: 0.9em;\n                        }\n                        .cash-amount {\n                            font-weight: bold;\n                            color: #00704A;\n                        }\n                        @media (max-width: 600px) {\n                            th, td {\n                                padding: 8px 4px;\n                                font-size: 14px;\n                            }\n                        }\n                    </style>\n                </head>\n                <body>\n                    <h1>Tip Distribution Results</h1>\n                    <div class="info">\n                        <p><strong>Hourly Rate Calculation:</strong> $${state.totalTipAmount.toFixed(2)} ÷ ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour</p>\n                        <p><strong>Bills Needed:</strong> ${totalBills[20]} × $20, ${totalBills[10]} × $10, ${totalBills[5]} × $5, ${totalBills[1]} × $1</p>\n                    </div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Partner Name</th>\n                                <th>Hours</th>\n                                <th>Calculation</th>\n                                <th>Cash</th>\n                                <th>Bills</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${tableRows}\n                        </tbody>\n                    </table>\n                </body>\n                </html>\n            `;\n        }\n\n        // Manual partner input handling\n        function renderManualPartnerInputs() {\n            const count = parseInt(numPartners.value) || 3;\n            manualPartnerInputs.innerHTML = \'\';\n            \n            for (let i = 0; i < count; i++) {\n                const partnerDiv = document.createElement(\'div\');\n                partnerDiv.classList.add(\'mb-6\', \'p-3\', \'border\', \'rounded-lg\');\n                partnerDiv.innerHTML = `\n                    <h4 class="mb-2 starbucks-green">Partner ${i+1}</h4>\n                    <div class="mb-2">\n                        <label for="name_${i}" class="block mb-1">Name:</label>\n                        <input type="text" id="name_${i}" class="w-full">\n                    </div>\n                    <div>\n                        <label for="hours_${i}" class="block mb-1">Hours:</label>\n                        <input type="number" id="hours_${i}" min="0" step="0.25" class="w-full">\n                    </div>\n                `;\n                manualPartnerInputs.appendChild(partnerDiv);\n            }\n        }\n\n        // Save manual partner data\n        saveManualPartners.addEventListener(\'click\', function() {\n            const count = parseInt(numPartners.value) || 3;\n            const manualPartnerData = [];\n            \n            for (let i = 0; i < count; i++) {\n                const name = document.getElementById(`name_${i}`).value;\n                const hours = parseFloat(document.getElementById(`hours_${i}`).value) || 0;\n                \n                if (name && hours > 0) {\n                    manualPartnerData.push({\n                        name: name,\n                        number: i + 1,\n                        hours: hours\n                    });\n                }\n            }\n            \n            if (manualPartnerData.length === 0) {\n                alert(\'Please provide valid names and hours for at least one partner.\');\n                return;\n            }\n            \n            // Update state\n            state.partnerData = manualPartnerData;\n            state.totalHours = manualPartnerData.reduce((sum, partner) => sum + partner.hours, 0);\n            \n            // Update UI\n            totalHours.textContent = `Total Hours: ${state.totalHours}`;\n            partnerList.innerHTML = \'\';\n            \n            manualPartnerData.forEach(partner => {\n                const partnerEl = document.createElement(\'div\');\n                partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                partnerList.appendChild(partnerEl);\n            });\n            \n            // Show partner data section\n            partnerDataSection.classList.remove(\'hidden\');\n            \n            // Scroll to partner data section\n            partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n            \n            // Close the collapsible\n            const collapsible = document.querySelector(\'.collapsible\');\n            if (collapsible.classList.contains(\'active\')) {\n                collapsible.click();\n            }\n        });\n    </script>\n', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = ce519c1100dd48e943af400177ed649bf9be470122c01ef9c9b427c62d73691b7c2a1312fd882c5cb27f15625db27d0ae638b6bbaed5b84952b058f77a568b9f_0
2025-05-31 11:15:24,219 - semgrep.rule_match - DEBUG - match_key = ('\n        // Add the following JavaScript to handle the drag and drop functionality\n        const fileDropArea = document.querySelector(\'.file-drop-area\');\n        const fileInput = document.getElementById(\'imageUpload\');\n        \n        [\'dragenter\', \'dragover\', \'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n        \n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        \n        [\'dragenter\', \'dragover\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, highlight, false);\n        });\n        \n        [\'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, unhighlight, false);\n        });\n        \n        function highlight() {\n            fileDropArea.classList.add(\'dragover\');\n        }\n        \n        function unhighlight() {\n            fileDropArea.classList.remove(\'dragover\');\n        }\n        \n        fileDropArea.addEventListener(\'drop\', handleDrop, false);\n        \n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            fileInput.files = files;\n            \n            // Trigger the change event\n            const event = new Event(\'change\', { bubbles: true });\n            fileInput.dispatchEvent(event);\n        }\n\n        // Global state management (similar to Streamlit\'s session state)\n        const state = {\n            ocrResult: null,\n            imageData: null,\n            partnerData: null,\n            totalHours: 0,\n            tipCalculated: false,\n            weekCounter: 1,\n            tipsHistory: [],\n            hourlyRate: 0,\n            totalTipAmount: 0,\n            distributedTips: null\n        };\n\n        // Gemini API settings\n        const GEMINI_API_KEY = "AIzaSyCi_m_KbY-a36tvHl09C1Mtyx_K38GuokY";\n        const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";\n\n        // DOM Elements\n        const uploadSection = document.getElementById(\'uploadSection\');\n        const imageUpload = document.getElementById(\'imageUpload\');\n        const selectedFileName = document.getElementById(\'selectedFileName\');\n        const processButton = document.getElementById(\'processButton\');\n        const previewSection = document.getElementById(\'previewSection\');\n        const previewImage = document.getElementById(\'previewImage\');\n        const extractedTextSection = document.getElementById(\'extractedTextSection\');\n        const extractedText = document.getElementById(\'extractedText\');\n        const extractPartnerDataBtn = document.getElementById(\'extractPartnerDataBtn\');\n        const partnerDataSection = document.getElementById(\'partnerDataSection\');\n        const totalHours = document.getElementById(\'totalHours\');\n        const partnerList = document.getElementById(\'partnerList\');\n        const totalTipAmount = document.getElementById(\'totalTipAmount\');\n        const calculateTipsBtn = document.getElementById(\'calculateTipsBtn\');\n        const tipDistributionSection = document.getElementById(\'tipDistributionSection\');\n        const hourlyRateInfo = document.getElementById(\'hourlyRateInfo\');\n        const calculationDetails = document.getElementById(\'calculationDetails\');\n        const tipDistributionList = document.getElementById(\'tipDistributionList\');\n        const copyPasteFormat = document.getElementById(\'copyPasteFormat\');\n        const saveToHistoryBtn = document.getElementById(\'saveToHistoryBtn\');\n        const historySection = document.getElementById(\'historySection\');\n        const historyList = document.getElementById(\'historyList\');\n        const downloadSection = document.getElementById(\'downloadSection\');\n        const downloadOcrBtn = document.getElementById(\'downloadOcrBtn\');\n        const downloadTableBtn = document.getElementById(\'downloadTableBtn\');\n        const numPartners = document.getElementById(\'numPartners\');\n        const manualPartnerInputs = document.getElementById(\'manualPartnerInputs\');\n        const saveManualPartners = document.getElementById(\'saveManualPartners\');\n\n        // Event Listeners\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Set up collapsible sections\n            const collapsibles = document.getElementsByClassName(\'collapsible\');\n            for (let i = 0; i < collapsibles.length; i++) {\n                collapsibles[i].addEventListener(\'click\', function() {\n                    this.classList.toggle(\'active\');\n                    const content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    } else {\n                        content.style.maxHeight = content.scrollHeight + \'px\';\n                    }\n                });\n            }\n\n            // Set up number of partners change event\n            numPartners.addEventListener(\'change\', renderManualPartnerInputs);\n            renderManualPartnerInputs(); // Initial render\n        });\n\n        // File upload handling\n        imageUpload.addEventListener(\'change\', function(e) {\n            if (this.files.length > 0) {\n                const file = this.files[0];\n                selectedFileName.textContent = file.name;\n                processButton.classList.remove(\'opacity-50\', \'cursor-not-allowed\');\n                processButton.disabled = false;\n                \n                // Create image preview\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    state.imageData = e.target.result;\n                }\n                reader.readAsDataURL(file);\n            }\n        });\n\n        // Helper function to convert base64 to correct format for Gemini API\n        function convertBase64ForGemini(base64String) {\n            // Remove data URL prefix if present\n            const base64Data = base64String.includes(\',\') \n                ? base64String.split(\',\')[1] \n                : base64String;\n            \n            return base64Data;\n        }\n\n        // Process button with Gemini API - now combines both steps\n        processButton.addEventListener(\'click\', async function() {\n            if (!state.imageData) return;\n            \n            // Show loading state\n            this.textContent = \'Processing Tip Sheet...\';\n            this.disabled = true;\n            \n            try {\n                // Step 1: Process the image\n                const base64Image = convertBase64ForGemini(state.imageData);\n                \n                const promptText = "Please analyze this image and: " +\n                    "1. Extract all visible text, especially focusing on names and hours worked " +\n                    "2. Maintain the original formatting and structure " +\n                    "3. Preserve any important visual context " +\n                    "4. Make sure to clearly identify all partner/employee names and their corresponding hours " +\n                    "Extract and format the text clearly:";\n                \n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: promptText },\n                                {\n                                    inline_data: {\n                                        mime_type: "image/jpeg",\n                                        data: base64Image\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.4,\n                        topK: 32,\n                        topP: 1,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (responseData.candidates && \n                    responseData.candidates[0] && \n                    responseData.candidates[0].content && \n                    responseData.candidates[0].content.parts && \n                    responseData.candidates[0].content.parts[0] && \n                    responseData.candidates[0].content.parts[0].text) {\n                    \n                    state.ocrResult = responseData.candidates[0].content.parts[0].text;\n                    \n                    // Show preview\n                    previewSection.classList.remove(\'hidden\');\n                    previewImage.src = state.imageData;\n                    \n                    // Store extracted text but don\'t display the section\n                    extractedText.textContent = state.ocrResult;\n                    \n                    // Show download option for OCR text\n                    downloadSection.classList.remove(\'hidden\');\n                    updateDownloadLinks();\n                    \n                    // Step 2: Automatically extract partner data\n                    this.textContent = \'Extracting Partner Data...\';\n                    const success = await extractPartnerData();\n                    \n                    if (success) {\n                        // Hide extractedTextSection if it\'s visible (in case it was shown before)\n                        extractedTextSection.classList.add(\'hidden\');\n                    }\n                    \n                } else {\n                    throw new Error(\'Couldn\\\'t extract text from the API response\');\n                }\n            } catch (error) {\n                console.error(\'Error processing with Gemini API:\', error);\n                alert(`Error processing image: ${error.message || \'Unknown error\'}`);\n            } finally {\n                // Reset process button\n                processButton.textContent = \'Process\';\n                processButton.disabled = false;\n            }\n        });\n\n        // Extract partner data function (now called automatically by the process button)\n        async function extractPartnerData() {\n            if (!state.ocrResult) return false;\n            \n            try {\n                // Prepare the prompt for partner data extraction\n                const extractionPrompt = \n                    `From the following text, extract partner names and their hours worked. Format as JSON:\\n\\n` +\n                    `${state.ocrResult}\\n\\n` +\n                    `Return a JSON array of objects with \'name\' and \'hours\' fields. Example:\n                    [\n                        {"name": "John Smith", "hours": 32.5},\n                        {"name": "Jane Doe", "hours": 28.75}\n                    ]\n                    \n                    Only include valid partners with hours. Output ONLY the JSON array, nothing else.`;\n                \n                // Prepare the request payload\n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: extractionPrompt }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.2,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                // Make the API call to extract partner data\n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                const partnerDataText = responseData.candidates[0].content.parts[0].text;\n                \n                // Extract JSON from the response\n                const jsonMatch = partnerDataText.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n                let partnerData = [];\n                \n                if (jsonMatch) {\n                    try {\n                        partnerData = JSON.parse(jsonMatch[0]);\n                    } catch (e) {\n                        throw new Error(\'Failed to parse JSON from API response\');\n                    }\n                } else {\n                    throw new Error(\'No valid JSON found in the API response\');\n                }\n                \n                // Add partner numbers\n                partnerData.forEach((partner, index) => {\n                    partner.number = index + 1;\n                });\n                \n                // Calculate total hours\n                state.totalHours = partnerData.reduce((sum, partner) => sum + parseFloat(partner.hours), 0);\n                state.partnerData = partnerData;\n                \n                // Update UI\n                totalHours.textContent = `Total Hours: ${state.totalHours}`;\n                partnerList.innerHTML = \'\';\n                \n                partnerData.forEach(partner => {\n                    const partnerEl = document.createElement(\'div\');\n                    partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                    partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                    partnerList.appendChild(partnerEl);\n                });\n                \n                // Show partner data section\n                partnerDataSection.classList.remove(\'hidden\');\n                \n                // Scroll to partner data section\n                partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n                \n                return true;\n            } catch (error) {\n                console.error(\'Error extracting partner data:\', error);\n                alert(`Error extracting partner data: ${error.message || \'Unknown error\'}`);\n                return false;\n            }\n        }\n\n        // Calculate Tips button\n        calculateTipsBtn.addEventListener(\'click\', function() {\n            const tipAmount = parseFloat(totalTipAmount.value);\n            if (isNaN(tipAmount) || tipAmount <= 0) {\n                alert(\'Please enter a valid tip amount.\');\n                return;\n            }\n            \n            if (!state.partnerData || state.partnerData.length === 0) {\n                alert(\'No partner data available.\');\n                return;\n            }\n            \n            // Calculate hourly rate (truncate to 2 decimal places)\n            state.totalTipAmount = tipAmount;\n            state.hourlyRate = Math.floor((tipAmount / state.totalHours) * 100) / 100;\n            \n            // Calculate individual tips with bill distribution\n            const partnerData = JSON.parse(JSON.stringify(state.partnerData)); // Deep copy\n            const denominations = [20, 10, 5, 1];\n            const startIndex = (state.weekCounter - 1) % partnerData.length;\n            const remainingAmounts = {};\n            \n            // Calculate exact and rounded tip amounts\n            partnerData.forEach(partner => {\n                const exactAmount = partner.hours * state.hourlyRate;\n                partner.raw_tip_amount = exactAmount;\n                partner.exact_tip_amount = exactAmount;\n                partner.tip_amount = Math.round(exactAmount);\n                partner.bills = {20: 0, 10: 0, 5: 0, 1: 0};\n                remainingAmounts[partner.number] = partner.tip_amount;\n            });\n            \n            // Distribute bills\n            for (const denomination of denominations) {\n                // Create order of partners starting with rotation partner\n                const partnerOrder = [];\n                for (let i = 0; i < partnerData.length; i++) {\n                    partnerOrder.push((startIndex + i) % partnerData.length);\n                }\n                \n                // Distribute bills of this denomination\n                let distributed = true;\n                while (distributed) {\n                    distributed = false;\n                    for (const idx of partnerOrder) {\n                        const partner = partnerData[idx];\n                        if (remainingAmounts[partner.number] >= denomination) {\n                            partner.bills[denomination]++;\n                            remainingAmounts[partner.number] -= denomination;\n                            distributed = true;\n                        }\n                    }\n                }\n            }\n            \n            // Generate bills text and formatted output\n            partnerData.forEach(partner => {\n                const billsText = [];\n                for (const denom of [20, 10, 5, 1]) {\n                    if (partner.bills[denom] > 0) {\n                        billsText.push(`${partner.bills[denom]}x$${denom}`);\n                    }\n                }\n                \n                partner.bills_text = billsText.join(\',\');\n                partner.formatted_output = `Partner Name: ${partner.name} | #: ${partner.number} | ` +\n                    `Hours: ${partner.hours} | Exact: $${partner.exact_tip_amount.toFixed(2)} | ` +\n                    `Cash: $${partner.tip_amount} | Bills: ${partner.bills_text}`;\n            });\n            \n            // Save distributed tips to state\n            state.distributedTips = partnerData;\n            state.tipCalculated = true;\n            \n            // Update UI\n            calculationDetails.textContent = `Total Tips: $${tipAmount.toFixed(2)} ÷ Total Hours: ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour`;\n            \n            // Calculate total bills needed\n            const totalBills = {20: 0, 10: 0, 5: 0, 1: 0};\n            partnerData.forEach(partner => {\n                totalBills[20] += partner.bills[20];\n                totalBills[10] += partner.bills[10];\n                totalBills[5] += partner.bills[5];\n                totalBills[1] += partner.bills[1];\n            });\n            \n            // Update bills needed summary\n            document.getElementById(\'twentyCount\').textContent = totalBills[20];\n            document.getElementById(\'tenCount\').textContent = totalBills[10];\n            document.getElementById(\'fiveCount\').textContent = totalBills[5];\n            document.getElementById(\'oneCount\').textContent = totalBills[1];\n            \n            // Render tip distribution cards\n            tipDistributionList.innerHTML = \'\';\n            let copyPasteText = \'\';\n            \n            partnerData.forEach(partner => {\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${partner.exact_tip_amount.toFixed(2)}`;\n                \n                // Create partner card\n                const card = document.createElement(\'div\');\n                card.classList.add(\'partner-card\');\n                \n                // Split bills text into chips\n                const billChips = partner.bills_text.split(\',\').map(bill => \n                    `<span class="bill-chip">${bill.trim()}</span>`\n                ).join(\' \');\n                \n                card.innerHTML = `\n                    <div class="partner-card-header">\n                        <h4 class="partner-card-name">${partner.name}</h4>\n                        <span class="partner-card-amount">$${partner.tip_amount}</span>\n                    </div>\n                    <div class="mt-1">\n                        <span class="text-sm">${partner.hours} hours</span>\n                    </div>\n                    <div class="calculation-box">\n                        ${calculation} → $${partner.tip_amount}\n                    </div>\n                    <div class="bills-box">\n                        <div class="flex flex-wrap gap-1">\n                            ${billChips}\n                        </div>\n                    </div>\n                `;\n                \n                tipDistributionList.appendChild(card);\n                copyPasteText += partner.formatted_output + \'\\n\';\n            });\n            \n            // Update copy-paste format\n            copyPasteFormat.textContent = copyPasteText;\n            \n            // Show tip distribution section\n            tipDistributionSection.classList.remove(\'hidden\');\n            \n            // Update download links for the table\n            updateDownloadLinks();\n            \n            // Increment week counter for next allocation\n            state.weekCounter++;\n            \n            // Scroll to tip distribution section\n            tipDistributionSection.scrollIntoView({behavior: \'smooth\'});\n        });\n\n        // Save to History button\n        saveToHistoryBtn.addEventListener(\'click\', function() {\n            if (!state.distributedTips) return;\n            \n            const distribution = {\n                week: state.weekCounter - 1,\n                total_amount: state.totalTipAmount,\n                total_hours: state.totalHours,\n                partners: state.distributedTips\n            };\n            \n            state.tipsHistory.push(distribution);\n            \n            // Update UI\n            updateHistoryList();\n            historySection.classList.remove(\'hidden\');\n            \n            // Show success message\n            alert(\'Distribution saved to history!\');\n        });\n\n        // Functions for updating the UI\n        function updateDownloadLinks() {\n            if (state.ocrResult) {\n                const ocrBlob = new Blob([state.ocrResult], {type: \'text/plain\'});\n                downloadOcrBtn.href = URL.createObjectURL(ocrBlob);\n            }\n            \n            if (state.tipCalculated && state.distributedTips) {\n                const tableHtml = generateHtmlTable();\n                const tableBlob = new Blob([tableHtml], {type: \'text/html\'});\n                downloadTableBtn.href = URL.createObjectURL(tableBlob);\n                downloadTableBtn.classList.remove(\'hidden\');\n            } else {\n                downloadTableBtn.classList.add(\'hidden\');\n            }\n        }\n\n        function updateHistoryList() {\n            historyList.innerHTML = \'\';\n            \n            state.tipsHistory.forEach((dist, i) => {\n                const historyItem = document.createElement(\'div\');\n                historyItem.innerHTML = `\n                    <div class="custom-card mb-4">\n                        <h4 class="font-bold starbucks-green">Week ${dist.week}</h4>\n                        <p>Total: $${dist.total_amount.toFixed(2)} for ${dist.total_hours.toFixed(2)} hours</p>\n                        <div class="mt-2 pl-4">\n                            ${dist.partners.map(partner => \n                                `<div class="mb-1">\n                                    ${partner.name} | #${partner.number} | ${partner.hours} hours | $${partner.tip_amount} | ${partner.bills_text}\n                                </div>`\n                            ).join(\'\')}\n                        </div>\n                    </div>\n                `;\n                historyList.appendChild(historyItem);\n            });\n        }\n\n        function generateHtmlTable() {\n            const tipData = state.distributedTips.map(partner => {\n                const exactAmount = partner.exact_tip_amount;\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${exactAmount.toFixed(2)}`;\n                \n                return {\n                    "Partner Name": partner.name,\n                    "#": partner.number,\n                    "Hours": partner.hours,\n                    "Calculation": calculation,\n                    "Cash Amount": `$${partner.tip_amount}`,\n                    "Bills": partner.bills_text\n                };\n            });\n            \n            let tableRows = \'\';\n            tipData.forEach(partner => {\n                tableRows += `\n                    <tr>\n                        <td>${partner[\'#\']}</td>\n                        <td>${partner[\'Partner Name\']}</td>\n                        <td>${partner[\'Hours\']}</td>\n                        <td class="calculation">${partner[\'Calculation\']}</td>\n                        <td class="cash-amount">${partner[\'Cash Amount\']}</td>\n                        <td>${partner[\'Bills\']}</td>\n                    </tr>\n                `;\n            });\n            \n            return `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <meta charset="UTF-8">\n                    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                    <title>TipJar Results</title>\n                    <style>\n                        body {\n                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;\n                            margin: 20px;\n                            padding: 0;\n                            color: #333;\n                        }\n                        h1 {\n                            color: #00704A;\n                            text-align: center;\n                        }\n                        .info {\n                            margin: 10px 0;\n                            background-color: #f8f9fa;\n                            padding: 10px;\n                            border-radius: 8px;\n                        }\n                        table {\n                            width: 100%;\n                            border-collapse: collapse;\n                            margin-top: 20px;\n                            border-radius: 8px;\n                            overflow: hidden;\n                        }\n                        th, td {\n                            border: 1px solid #ddd;\n                            padding: 12px 8px;\n                            text-align: left;\n                        }\n                        th {\n                            background-color: #00704A;\n                            color: white;\n                        }\n                        tr:nth-child(even) {\n                            background-color: #f2f2f2;\n                        }\n                        .calculation {\n                            color: #666;\n                            font-size: 0.9em;\n                        }\n                        .cash-amount {\n                            font-weight: bold;\n                            color: #00704A;\n                        }\n                        @media (max-width: 600px) {\n                            th, td {\n                                padding: 8px 4px;\n                                font-size: 14px;\n                            }\n                        }\n                    </style>\n                </head>\n                <body>\n                    <h1>Tip Distribution Results</h1>\n                    <div class="info">\n                        <p><strong>Hourly Rate Calculation:</strong> $${state.totalTipAmount.toFixed(2)} ÷ ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour</p>\n                        <p><strong>Bills Needed:</strong> ${totalBills[20]} × $20, ${totalBills[10]} × $10, ${totalBills[5]} × $5, ${totalBills[1]} × $1</p>\n                    </div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Partner Name</th>\n                                <th>Hours</th>\n                                <th>Calculation</th>\n                                <th>Cash</th>\n                                <th>Bills</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${tableRows}\n                        </tbody>\n                    </table>\n                </body>\n                </html>\n            `;\n        }\n\n        // Manual partner input handling\n        function renderManualPartnerInputs() {\n            const count = parseInt(numPartners.value) || 3;\n            manualPartnerInputs.innerHTML = \'\';\n            \n            for (let i = 0; i < count; i++) {\n                const partnerDiv = document.createElement(\'div\');\n                partnerDiv.classList.add(\'mb-6\', \'p-3\', \'border\', \'rounded-lg\');\n                partnerDiv.innerHTML = `\n                    <h4 class="mb-2 starbucks-green">Partner ${i+1}</h4>\n                    <div class="mb-2">\n                        <label for="name_${i}" class="block mb-1">Name:</label>\n                        <input type="text" id="name_${i}" class="w-full">\n                    </div>\n                    <div>\n                        <label for="hours_${i}" class="block mb-1">Hours:</label>\n                        <input type="number" id="hours_${i}" min="0" step="0.25" class="w-full">\n                    </div>\n                `;\n                manualPartnerInputs.appendChild(partnerDiv);\n            }\n        }\n\n        // Save manual partner data\n        saveManualPartners.addEventListener(\'click\', function() {\n            const count = parseInt(numPartners.value) || 3;\n            const manualPartnerData = [];\n            \n            for (let i = 0; i < count; i++) {\n                const name = document.getElementById(`name_${i}`).value;\n                const hours = parseFloat(document.getElementById(`hours_${i}`).value) || 0;\n                \n                if (name && hours > 0) {\n                    manualPartnerData.push({\n                        name: name,\n                        number: i + 1,\n                        hours: hours\n                    });\n                }\n            }\n            \n            if (manualPartnerData.length === 0) {\n                alert(\'Please provide valid names and hours for at least one partner.\');\n                return;\n            }\n            \n            // Update state\n            state.partnerData = manualPartnerData;\n            state.totalHours = manualPartnerData.reduce((sum, partner) => sum + partner.hours, 0);\n            \n            // Update UI\n            totalHours.textContent = `Total Hours: ${state.totalHours}`;\n            partnerList.innerHTML = \'\';\n            \n            manualPartnerData.forEach(partner => {\n                const partnerEl = document.createElement(\'div\');\n                partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                partnerList.appendChild(partnerEl);\n            });\n            \n            // Show partner data section\n            partnerDataSection.classList.remove(\'hidden\');\n            \n            // Scroll to partner data section\n            partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n            \n            // Close the collapsible\n            const collapsible = document.querySelector(\'.collapsible\');\n            if (collapsible.classList.contains(\'active\')) {\n                collapsible.click();\n            }\n        });\n     $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n        // Add the following JavaScript to handle the drag and drop functionality\n        const fileDropArea = document.querySelector(\'.file-drop-area\');\n        const fileInput = document.getElementById(\'imageUpload\');\n        \n        [\'dragenter\', \'dragover\', \'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, preventDefaults, false);\n        });\n        \n        function preventDefaults(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n        \n        [\'dragenter\', \'dragover\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, highlight, false);\n        });\n        \n        [\'dragleave\', \'drop\'].forEach(eventName => {\n            fileDropArea.addEventListener(eventName, unhighlight, false);\n        });\n        \n        function highlight() {\n            fileDropArea.classList.add(\'dragover\');\n        }\n        \n        function unhighlight() {\n            fileDropArea.classList.remove(\'dragover\');\n        }\n        \n        fileDropArea.addEventListener(\'drop\', handleDrop, false);\n        \n        function handleDrop(e) {\n            const dt = e.dataTransfer;\n            const files = dt.files;\n            fileInput.files = files;\n            \n            // Trigger the change event\n            const event = new Event(\'change\', { bubbles: true });\n            fileInput.dispatchEvent(event);\n        }\n\n        // Global state management (similar to Streamlit\'s session state)\n        const state = {\n            ocrResult: null,\n            imageData: null,\n            partnerData: null,\n            totalHours: 0,\n            tipCalculated: false,\n            weekCounter: 1,\n            tipsHistory: [],\n            hourlyRate: 0,\n            totalTipAmount: 0,\n            distributedTips: null\n        };\n\n        // Gemini API settings\n        const GEMINI_API_KEY = "AIzaSyCi_m_KbY-a36tvHl09C1Mtyx_K38GuokY";\n        const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent";\n\n        // DOM Elements\n        const uploadSection = document.getElementById(\'uploadSection\');\n        const imageUpload = document.getElementById(\'imageUpload\');\n        const selectedFileName = document.getElementById(\'selectedFileName\');\n        const processButton = document.getElementById(\'processButton\');\n        const previewSection = document.getElementById(\'previewSection\');\n        const previewImage = document.getElementById(\'previewImage\');\n        const extractedTextSection = document.getElementById(\'extractedTextSection\');\n        const extractedText = document.getElementById(\'extractedText\');\n        const extractPartnerDataBtn = document.getElementById(\'extractPartnerDataBtn\');\n        const partnerDataSection = document.getElementById(\'partnerDataSection\');\n        const totalHours = document.getElementById(\'totalHours\');\n        const partnerList = document.getElementById(\'partnerList\');\n        const totalTipAmount = document.getElementById(\'totalTipAmount\');\n        const calculateTipsBtn = document.getElementById(\'calculateTipsBtn\');\n        const tipDistributionSection = document.getElementById(\'tipDistributionSection\');\n        const hourlyRateInfo = document.getElementById(\'hourlyRateInfo\');\n        const calculationDetails = document.getElementById(\'calculationDetails\');\n        const tipDistributionList = document.getElementById(\'tipDistributionList\');\n        const copyPasteFormat = document.getElementById(\'copyPasteFormat\');\n        const saveToHistoryBtn = document.getElementById(\'saveToHistoryBtn\');\n        const historySection = document.getElementById(\'historySection\');\n        const historyList = document.getElementById(\'historyList\');\n        const downloadSection = document.getElementById(\'downloadSection\');\n        const downloadOcrBtn = document.getElementById(\'downloadOcrBtn\');\n        const downloadTableBtn = document.getElementById(\'downloadTableBtn\');\n        const numPartners = document.getElementById(\'numPartners\');\n        const manualPartnerInputs = document.getElementById(\'manualPartnerInputs\');\n        const saveManualPartners = document.getElementById(\'saveManualPartners\');\n\n        // Event Listeners\n        document.addEventListener(\'DOMContentLoaded\', function() {\n            // Set up collapsible sections\n            const collapsibles = document.getElementsByClassName(\'collapsible\');\n            for (let i = 0; i < collapsibles.length; i++) {\n                collapsibles[i].addEventListener(\'click\', function() {\n                    this.classList.toggle(\'active\');\n                    const content = this.nextElementSibling;\n                    if (content.style.maxHeight) {\n                        content.style.maxHeight = null;\n                    } else {\n                        content.style.maxHeight = content.scrollHeight + \'px\';\n                    }\n                });\n            }\n\n            // Set up number of partners change event\n            numPartners.addEventListener(\'change\', renderManualPartnerInputs);\n            renderManualPartnerInputs(); // Initial render\n        });\n\n        // File upload handling\n        imageUpload.addEventListener(\'change\', function(e) {\n            if (this.files.length > 0) {\n                const file = this.files[0];\n                selectedFileName.textContent = file.name;\n                processButton.classList.remove(\'opacity-50\', \'cursor-not-allowed\');\n                processButton.disabled = false;\n                \n                // Create image preview\n                const reader = new FileReader();\n                reader.onload = function(e) {\n                    state.imageData = e.target.result;\n                }\n                reader.readAsDataURL(file);\n            }\n        });\n\n        // Helper function to convert base64 to correct format for Gemini API\n        function convertBase64ForGemini(base64String) {\n            // Remove data URL prefix if present\n            const base64Data = base64String.includes(\',\') \n                ? base64String.split(\',\')[1] \n                : base64String;\n            \n            return base64Data;\n        }\n\n        // Process button with Gemini API - now combines both steps\n        processButton.addEventListener(\'click\', async function() {\n            if (!state.imageData) return;\n            \n            // Show loading state\n            this.textContent = \'Processing Tip Sheet...\';\n            this.disabled = true;\n            \n            try {\n                // Step 1: Process the image\n                const base64Image = convertBase64ForGemini(state.imageData);\n                \n                const promptText = "Please analyze this image and: " +\n                    "1. Extract all visible text, especially focusing on names and hours worked " +\n                    "2. Maintain the original formatting and structure " +\n                    "3. Preserve any important visual context " +\n                    "4. Make sure to clearly identify all partner/employee names and their corresponding hours " +\n                    "Extract and format the text clearly:";\n                \n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: promptText },\n                                {\n                                    inline_data: {\n                                        mime_type: "image/jpeg",\n                                        data: base64Image\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.4,\n                        topK: 32,\n                        topP: 1,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                \n                if (responseData.candidates && \n                    responseData.candidates[0] && \n                    responseData.candidates[0].content && \n                    responseData.candidates[0].content.parts && \n                    responseData.candidates[0].content.parts[0] && \n                    responseData.candidates[0].content.parts[0].text) {\n                    \n                    state.ocrResult = responseData.candidates[0].content.parts[0].text;\n                    \n                    // Show preview\n                    previewSection.classList.remove(\'hidden\');\n                    previewImage.src = state.imageData;\n                    \n                    // Store extracted text but don\'t display the section\n                    extractedText.textContent = state.ocrResult;\n                    \n                    // Show download option for OCR text\n                    downloadSection.classList.remove(\'hidden\');\n                    updateDownloadLinks();\n                    \n                    // Step 2: Automatically extract partner data\n                    this.textContent = \'Extracting Partner Data...\';\n                    const success = await extractPartnerData();\n                    \n                    if (success) {\n                        // Hide extractedTextSection if it\'s visible (in case it was shown before)\n                        extractedTextSection.classList.add(\'hidden\');\n                    }\n                    \n                } else {\n                    throw new Error(\'Couldn\\\'t extract text from the API response\');\n                }\n            } catch (error) {\n                console.error(\'Error processing with Gemini API:\', error);\n                alert(`Error processing image: ${error.message || \'Unknown error\'}`);\n            } finally {\n                // Reset process button\n                processButton.textContent = \'Process\';\n                processButton.disabled = false;\n            }\n        });\n\n        // Extract partner data function (now called automatically by the process button)\n        async function extractPartnerData() {\n            if (!state.ocrResult) return false;\n            \n            try {\n                // Prepare the prompt for partner data extraction\n                const extractionPrompt = \n                    `From the following text, extract partner names and their hours worked. Format as JSON:\\n\\n` +\n                    `${state.ocrResult}\\n\\n` +\n                    `Return a JSON array of objects with \'name\' and \'hours\' fields. Example:\n                    [\n                        {"name": "John Smith", "hours": 32.5},\n                        {"name": "Jane Doe", "hours": 28.75}\n                    ]\n                    \n                    Only include valid partners with hours. Output ONLY the JSON array, nothing else.`;\n                \n                // Prepare the request payload\n                const payload = {\n                    contents: [\n                        {\n                            parts: [\n                                { text: extractionPrompt }\n                            ]\n                        }\n                    ],\n                    generationConfig: {\n                        temperature: 0.2,\n                        topK: 40,\n                        topP: 0.95,\n                        maxOutputTokens: 2048,\n                    }\n                };\n                \n                // Make the API call to extract partner data\n                const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n                    method: \'POST\',\n                    headers: {\n                        \'Content-Type\': \'application/json\'\n                    },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);\n                }\n                \n                const responseData = await response.json();\n                const partnerDataText = responseData.candidates[0].content.parts[0].text;\n                \n                // Extract JSON from the response\n                const jsonMatch = partnerDataText.match(/\\[\\s*{[\\s\\S]*}\\s*\\]/);\n                let partnerData = [];\n                \n                if (jsonMatch) {\n                    try {\n                        partnerData = JSON.parse(jsonMatch[0]);\n                    } catch (e) {\n                        throw new Error(\'Failed to parse JSON from API response\');\n                    }\n                } else {\n                    throw new Error(\'No valid JSON found in the API response\');\n                }\n                \n                // Add partner numbers\n                partnerData.forEach((partner, index) => {\n                    partner.number = index + 1;\n                });\n                \n                // Calculate total hours\n                state.totalHours = partnerData.reduce((sum, partner) => sum + parseFloat(partner.hours), 0);\n                state.partnerData = partnerData;\n                \n                // Update UI\n                totalHours.textContent = `Total Hours: ${state.totalHours}`;\n                partnerList.innerHTML = \'\';\n                \n                partnerData.forEach(partner => {\n                    const partnerEl = document.createElement(\'div\');\n                    partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                    partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                    partnerList.appendChild(partnerEl);\n                });\n                \n                // Show partner data section\n                partnerDataSection.classList.remove(\'hidden\');\n                \n                // Scroll to partner data section\n                partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n                \n                return true;\n            } catch (error) {\n                console.error(\'Error extracting partner data:\', error);\n                alert(`Error extracting partner data: ${error.message || \'Unknown error\'}`);\n                return false;\n            }\n        }\n\n        // Calculate Tips button\n        calculateTipsBtn.addEventListener(\'click\', function() {\n            const tipAmount = parseFloat(totalTipAmount.value);\n            if (isNaN(tipAmount) || tipAmount <= 0) {\n                alert(\'Please enter a valid tip amount.\');\n                return;\n            }\n            \n            if (!state.partnerData || state.partnerData.length === 0) {\n                alert(\'No partner data available.\');\n                return;\n            }\n            \n            // Calculate hourly rate (truncate to 2 decimal places)\n            state.totalTipAmount = tipAmount;\n            state.hourlyRate = Math.floor((tipAmount / state.totalHours) * 100) / 100;\n            \n            // Calculate individual tips with bill distribution\n            const partnerData = JSON.parse(JSON.stringify(state.partnerData)); // Deep copy\n            const denominations = [20, 10, 5, 1];\n            const startIndex = (state.weekCounter - 1) % partnerData.length;\n            const remainingAmounts = {};\n            \n            // Calculate exact and rounded tip amounts\n            partnerData.forEach(partner => {\n                const exactAmount = partner.hours * state.hourlyRate;\n                partner.raw_tip_amount = exactAmount;\n                partner.exact_tip_amount = exactAmount;\n                partner.tip_amount = Math.round(exactAmount);\n                partner.bills = {20: 0, 10: 0, 5: 0, 1: 0};\n                remainingAmounts[partner.number] = partner.tip_amount;\n            });\n            \n            // Distribute bills\n            for (const denomination of denominations) {\n                // Create order of partners starting with rotation partner\n                const partnerOrder = [];\n                for (let i = 0; i < partnerData.length; i++) {\n                    partnerOrder.push((startIndex + i) % partnerData.length);\n                }\n                \n                // Distribute bills of this denomination\n                let distributed = true;\n                while (distributed) {\n                    distributed = false;\n                    for (const idx of partnerOrder) {\n                        const partner = partnerData[idx];\n                        if (remainingAmounts[partner.number] >= denomination) {\n                            partner.bills[denomination]++;\n                            remainingAmounts[partner.number] -= denomination;\n                            distributed = true;\n                        }\n                    }\n                }\n            }\n            \n            // Generate bills text and formatted output\n            partnerData.forEach(partner => {\n                const billsText = [];\n                for (const denom of [20, 10, 5, 1]) {\n                    if (partner.bills[denom] > 0) {\n                        billsText.push(`${partner.bills[denom]}x$${denom}`);\n                    }\n                }\n                \n                partner.bills_text = billsText.join(\',\');\n                partner.formatted_output = `Partner Name: ${partner.name} | #: ${partner.number} | ` +\n                    `Hours: ${partner.hours} | Exact: $${partner.exact_tip_amount.toFixed(2)} | ` +\n                    `Cash: $${partner.tip_amount} | Bills: ${partner.bills_text}`;\n            });\n            \n            // Save distributed tips to state\n            state.distributedTips = partnerData;\n            state.tipCalculated = true;\n            \n            // Update UI\n            calculationDetails.textContent = `Total Tips: $${tipAmount.toFixed(2)} ÷ Total Hours: ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour`;\n            \n            // Calculate total bills needed\n            const totalBills = {20: 0, 10: 0, 5: 0, 1: 0};\n            partnerData.forEach(partner => {\n                totalBills[20] += partner.bills[20];\n                totalBills[10] += partner.bills[10];\n                totalBills[5] += partner.bills[5];\n                totalBills[1] += partner.bills[1];\n            });\n            \n            // Update bills needed summary\n            document.getElementById(\'twentyCount\').textContent = totalBills[20];\n            document.getElementById(\'tenCount\').textContent = totalBills[10];\n            document.getElementById(\'fiveCount\').textContent = totalBills[5];\n            document.getElementById(\'oneCount\').textContent = totalBills[1];\n            \n            // Render tip distribution cards\n            tipDistributionList.innerHTML = \'\';\n            let copyPasteText = \'\';\n            \n            partnerData.forEach(partner => {\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${partner.exact_tip_amount.toFixed(2)}`;\n                \n                // Create partner card\n                const card = document.createElement(\'div\');\n                card.classList.add(\'partner-card\');\n                \n                // Split bills text into chips\n                const billChips = partner.bills_text.split(\',\').map(bill => \n                    `<span class="bill-chip">${bill.trim()}</span>`\n                ).join(\' \');\n                \n                card.innerHTML = `\n                    <div class="partner-card-header">\n                        <h4 class="partner-card-name">${partner.name}</h4>\n                        <span class="partner-card-amount">$${partner.tip_amount}</span>\n                    </div>\n                    <div class="mt-1">\n                        <span class="text-sm">${partner.hours} hours</span>\n                    </div>\n                    <div class="calculation-box">\n                        ${calculation} → $${partner.tip_amount}\n                    </div>\n                    <div class="bills-box">\n                        <div class="flex flex-wrap gap-1">\n                            ${billChips}\n                        </div>\n                    </div>\n                `;\n                \n                tipDistributionList.appendChild(card);\n                copyPasteText += partner.formatted_output + \'\\n\';\n            });\n            \n            // Update copy-paste format\n            copyPasteFormat.textContent = copyPasteText;\n            \n            // Show tip distribution section\n            tipDistributionSection.classList.remove(\'hidden\');\n            \n            // Update download links for the table\n            updateDownloadLinks();\n            \n            // Increment week counter for next allocation\n            state.weekCounter++;\n            \n            // Scroll to tip distribution section\n            tipDistributionSection.scrollIntoView({behavior: \'smooth\'});\n        });\n\n        // Save to History button\n        saveToHistoryBtn.addEventListener(\'click\', function() {\n            if (!state.distributedTips) return;\n            \n            const distribution = {\n                week: state.weekCounter - 1,\n                total_amount: state.totalTipAmount,\n                total_hours: state.totalHours,\n                partners: state.distributedTips\n            };\n            \n            state.tipsHistory.push(distribution);\n            \n            // Update UI\n            updateHistoryList();\n            historySection.classList.remove(\'hidden\');\n            \n            // Show success message\n            alert(\'Distribution saved to history!\');\n        });\n\n        // Functions for updating the UI\n        function updateDownloadLinks() {\n            if (state.ocrResult) {\n                const ocrBlob = new Blob([state.ocrResult], {type: \'text/plain\'});\n                downloadOcrBtn.href = URL.createObjectURL(ocrBlob);\n            }\n            \n            if (state.tipCalculated && state.distributedTips) {\n                const tableHtml = generateHtmlTable();\n                const tableBlob = new Blob([tableHtml], {type: \'text/html\'});\n                downloadTableBtn.href = URL.createObjectURL(tableBlob);\n                downloadTableBtn.classList.remove(\'hidden\');\n            } else {\n                downloadTableBtn.classList.add(\'hidden\');\n            }\n        }\n\n        function updateHistoryList() {\n            historyList.innerHTML = \'\';\n            \n            state.tipsHistory.forEach((dist, i) => {\n                const historyItem = document.createElement(\'div\');\n                historyItem.innerHTML = `\n                    <div class="custom-card mb-4">\n                        <h4 class="font-bold starbucks-green">Week ${dist.week}</h4>\n                        <p>Total: $${dist.total_amount.toFixed(2)} for ${dist.total_hours.toFixed(2)} hours</p>\n                        <div class="mt-2 pl-4">\n                            ${dist.partners.map(partner => \n                                `<div class="mb-1">\n                                    ${partner.name} | #${partner.number} | ${partner.hours} hours | $${partner.tip_amount} | ${partner.bills_text}\n                                </div>`\n                            ).join(\'\')}\n                        </div>\n                    </div>\n                `;\n                historyList.appendChild(historyItem);\n            });\n        }\n\n        function generateHtmlTable() {\n            const tipData = state.distributedTips.map(partner => {\n                const exactAmount = partner.exact_tip_amount;\n                const calculation = `${partner.hours} × $${state.hourlyRate.toFixed(2)} = $${exactAmount.toFixed(2)}`;\n                \n                return {\n                    "Partner Name": partner.name,\n                    "#": partner.number,\n                    "Hours": partner.hours,\n                    "Calculation": calculation,\n                    "Cash Amount": `$${partner.tip_amount}`,\n                    "Bills": partner.bills_text\n                };\n            });\n            \n            let tableRows = \'\';\n            tipData.forEach(partner => {\n                tableRows += `\n                    <tr>\n                        <td>${partner[\'#\']}</td>\n                        <td>${partner[\'Partner Name\']}</td>\n                        <td>${partner[\'Hours\']}</td>\n                        <td class="calculation">${partner[\'Calculation\']}</td>\n                        <td class="cash-amount">${partner[\'Cash Amount\']}</td>\n                        <td>${partner[\'Bills\']}</td>\n                    </tr>\n                `;\n            });\n            \n            return `\n                <!DOCTYPE html>\n                <html>\n                <head>\n                    <meta charset="UTF-8">\n                    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n                    <title>TipJar Results</title>\n                    <style>\n                        body {\n                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;\n                            margin: 20px;\n                            padding: 0;\n                            color: #333;\n                        }\n                        h1 {\n                            color: #00704A;\n                            text-align: center;\n                        }\n                        .info {\n                            margin: 10px 0;\n                            background-color: #f8f9fa;\n                            padding: 10px;\n                            border-radius: 8px;\n                        }\n                        table {\n                            width: 100%;\n                            border-collapse: collapse;\n                            margin-top: 20px;\n                            border-radius: 8px;\n                            overflow: hidden;\n                        }\n                        th, td {\n                            border: 1px solid #ddd;\n                            padding: 12px 8px;\n                            text-align: left;\n                        }\n                        th {\n                            background-color: #00704A;\n                            color: white;\n                        }\n                        tr:nth-child(even) {\n                            background-color: #f2f2f2;\n                        }\n                        .calculation {\n                            color: #666;\n                            font-size: 0.9em;\n                        }\n                        .cash-amount {\n                            font-weight: bold;\n                            color: #00704A;\n                        }\n                        @media (max-width: 600px) {\n                            th, td {\n                                padding: 8px 4px;\n                                font-size: 14px;\n                            }\n                        }\n                    </style>\n                </head>\n                <body>\n                    <h1>Tip Distribution Results</h1>\n                    <div class="info">\n                        <p><strong>Hourly Rate Calculation:</strong> $${state.totalTipAmount.toFixed(2)} ÷ ${state.totalHours.toFixed(2)} = $${state.hourlyRate.toFixed(2)} per hour</p>\n                        <p><strong>Bills Needed:</strong> ${totalBills[20]} × $20, ${totalBills[10]} × $10, ${totalBills[5]} × $5, ${totalBills[1]} × $1</p>\n                    </div>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Partner Name</th>\n                                <th>Hours</th>\n                                <th>Calculation</th>\n                                <th>Cash</th>\n                                <th>Bills</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${tableRows}\n                        </tbody>\n                    </table>\n                </body>\n                </html>\n            `;\n        }\n\n        // Manual partner input handling\n        function renderManualPartnerInputs() {\n            const count = parseInt(numPartners.value) || 3;\n            manualPartnerInputs.innerHTML = \'\';\n            \n            for (let i = 0; i < count; i++) {\n                const partnerDiv = document.createElement(\'div\');\n                partnerDiv.classList.add(\'mb-6\', \'p-3\', \'border\', \'rounded-lg\');\n                partnerDiv.innerHTML = `\n                    <h4 class="mb-2 starbucks-green">Partner ${i+1}</h4>\n                    <div class="mb-2">\n                        <label for="name_${i}" class="block mb-1">Name:</label>\n                        <input type="text" id="name_${i}" class="w-full">\n                    </div>\n                    <div>\n                        <label for="hours_${i}" class="block mb-1">Hours:</label>\n                        <input type="number" id="hours_${i}" min="0" step="0.25" class="w-full">\n                    </div>\n                `;\n                manualPartnerInputs.appendChild(partnerDiv);\n            }\n        }\n\n        // Save manual partner data\n        saveManualPartners.addEventListener(\'click\', function() {\n            const count = parseInt(numPartners.value) || 3;\n            const manualPartnerData = [];\n            \n            for (let i = 0; i < count; i++) {\n                const name = document.getElementById(`name_${i}`).value;\n                const hours = parseFloat(document.getElementById(`hours_${i}`).value) || 0;\n                \n                if (name && hours > 0) {\n                    manualPartnerData.push({\n                        name: name,\n                        number: i + 1,\n                        hours: hours\n                    });\n                }\n            }\n            \n            if (manualPartnerData.length === 0) {\n                alert(\'Please provide valid names and hours for at least one partner.\');\n                return;\n            }\n            \n            // Update state\n            state.partnerData = manualPartnerData;\n            state.totalHours = manualPartnerData.reduce((sum, partner) => sum + partner.hours, 0);\n            \n            // Update UI\n            totalHours.textContent = `Total Hours: ${state.totalHours}`;\n            partnerList.innerHTML = \'\';\n            \n            manualPartnerData.forEach(partner => {\n                const partnerEl = document.createElement(\'div\');\n                partnerEl.classList.add(\'text-sm\', \'mb-1\');\n                partnerEl.textContent = `${partner.name} - ${partner.hours} hours`;\n                partnerList.appendChild(partnerEl);\n            });\n            \n            // Show partner data section\n            partnerDataSection.classList.remove(\'hidden\');\n            \n            // Scroll to partner data section\n            partnerDataSection.scrollIntoView({behavior: \'smooth\'});\n            \n            // Close the collapsible\n            const collapsible = document.querySelector(\'.collapsible\');\n            if (collapsible.classList.contains(\'active\')) {\n                collapsible.click();\n            }\n        });\n    </script>\n', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = ce519c1100dd48e943af400177ed649bf9be470122c01ef9c9b427c62d73691b7c2a1312fd882c5cb27f15625db27d0ae638b6bbaed5b84952b058f77a568b9f_0
2025-05-31 11:15:24,221 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.generic.secrets.security.detected-google-api-key') match_id = 0b7eec0a20a4cea7717bb969838faf43bc71a6afe9aab578d4c3de5954c3846fbc441d74807b941dd2f872d0c0387770ec58e5edb407d432777ccb492b5d3b77_0
2025-05-31 11:15:24,222 - semgrep.rule_match - DEBUG - match_key = ('\\bAIzaSy[0-9A-Za-z-_]{33}\\b \\bAIzaSy[0-9A-Za-z-_]{33}\\b[=]', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.generic.secrets.security.detected-google-api-key') match_id = cdf628f67dced810ccfef3790e1384cd83f20185763c485d1bb12173c109a37a31f3f106cba24723f24471c737f880a564195faf2344434c25270e0f6077ba5b_0
2025-05-31 11:15:24,223 - semgrep.rule_match - DEBUG - match_key = ('\\bAIzaSy[0-9A-Za-z-_]{33}\\b \\bAIzaSy[0-9A-Za-z-_]{33}\\b[=]', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.generic.secrets.security.detected-google-api-key') match_id = cdf628f67dced810ccfef3790e1384cd83f20185763c485d1bb12173c109a37a31f3f106cba24723f24471c737f880a564195faf2344434c25270e0f6077ba5b_0
2025-05-31 11:15:24,224 - semgrep.rule_match - DEBUG - match_key = ('\\bAIzaSy[0-9A-Za-z-_]{33}\\b \\bAIzaSy[0-9A-Za-z-_]{33}\\b[=]', PosixPath('attached_assets/index.html'), 'config..semgrep.vendored-rules.generic.secrets.security.detected-google-api-key') match_id = cdf628f67dced810ccfef3790e1384cd83f20185763c485d1bb12173c109a37a31f3f106cba24723f24471c737f880a564195faf2344434c25270e0f6077ba5b_0
2025-05-31 11:15:24,224 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ee74fd49637bebe183eca7188dbde26e386314e62cc2e7ba1ee60b377b638243fcd84e6c6fa04886198ccacfa6a711bfbcc61a28f9ddc913d5b3c53083cbc90_0
2025-05-31 11:15:24,225 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b49878117001e5526d0ddb80975433e4d6e2f7ba90b0062cdb5079b823b58fa01900cf30cd37c08f6b4f1c19d48b79470eb7ee4c03da7ed44a890e962e9e3647_0
2025-05-31 11:15:24,225 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b49878117001e5526d0ddb80975433e4d6e2f7ba90b0062cdb5079b823b58fa01900cf30cd37c08f6b4f1c19d48b79470eb7ee4c03da7ed44a890e962e9e3647_0
2025-05-31 11:15:24,226 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b49878117001e5526d0ddb80975433e4d6e2f7ba90b0062cdb5079b823b58fa01900cf30cd37c08f6b4f1c19d48b79470eb7ee4c03da7ed44a890e962e9e3647_0
2025-05-31 11:15:24,226 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ee74fd49637bebe183eca7188dbde26e386314e62cc2e7ba1ee60b377b638243fcd84e6c6fa04886198ccacfa6a711bfbcc61a28f9ddc913d5b3c53083cbc90_0
2025-05-31 11:15:24,227 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 05398de30d2ca60e25b3985e81870aa90891cb1834abb384e8d33e382fcc0355117f021b8a4cd1a9d9a528f72b3b68f40e777f419bf60114a163df5c8edb6151_0
2025-05-31 11:15:24,227 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 05398de30d2ca60e25b3985e81870aa90891cb1834abb384e8d33e382fcc0355117f021b8a4cd1a9d9a528f72b3b68f40e777f419bf60114a163df5c8edb6151_0
2025-05-31 11:15:24,228 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 05398de30d2ca60e25b3985e81870aa90891cb1834abb384e8d33e382fcc0355117f021b8a4cd1a9d9a528f72b3b68f40e777f419bf60114a163df5c8edb6151_0
2025-05-31 11:15:24,228 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ee74fd49637bebe183eca7188dbde26e386314e62cc2e7ba1ee60b377b638243fcd84e6c6fa04886198ccacfa6a711bfbcc61a28f9ddc913d5b3c53083cbc90_0
2025-05-31 11:15:24,229 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-05-31 11:15:24,229 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-05-31 11:15:24,230 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-05-31 11:15:24,231 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = 91042d9fdbb415f0607da799c8aab76e9f77e539002834afe3c7101e3b0b7408e0aebbde570d521d2bafe5d58d3991022600507454ab8397f026ab039906e822_0
2025-05-31 11:15:24,231 - semgrep.rule_match - DEBUG - match_key = ('\'$\' ^[\\"\\\']([\\\'\\"\\<\\>\\*\\|\\{\\}\\[\\]\\%\\$]{1}|\\\\n|\\\\r|\\\\t|\\\\&)[\\"\\\']$ billA.replace((\'$\': string), ...)\n', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = dbbe48dd83ffdddbc8976d1050b1c8f9104d1910112e784fdec570610ddac1cbb39242756419eae05cacb38a78ee917d045f0f995af59e8a613fd5e0472ccf80_0
2025-05-31 11:15:24,232 - semgrep.rule_match - DEBUG - match_key = ('\'$\' ^[\\"\\\']([\\\'\\"\\<\\>\\*\\|\\{\\}\\[\\]\\%\\$]{1}|\\\\n|\\\\r|\\\\t|\\\\&)[\\"\\\']$ billA.replace((\'$\': string), ...)\n', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = dbbe48dd83ffdddbc8976d1050b1c8f9104d1910112e784fdec570610ddac1cbb39242756419eae05cacb38a78ee917d045f0f995af59e8a613fd5e0472ccf80_0
2025-05-31 11:15:24,232 - semgrep.rule_match - DEBUG - match_key = ('\'$\' ^[\\"\\\']([\\\'\\"\\<\\>\\*\\|\\{\\}\\[\\]\\%\\$]{1}|\\\\n|\\\\r|\\\\t|\\\\&)[\\"\\\']$ billA.replace((\'$\': string), ...)\n', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = dbbe48dd83ffdddbc8976d1050b1c8f9104d1910112e784fdec570610ddac1cbb39242756419eae05cacb38a78ee917d045f0f995af59e8a613fd5e0472ccf80_0
2025-05-31 11:15:24,233 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = 91042d9fdbb415f0607da799c8aab76e9f77e539002834afe3c7101e3b0b7408e0aebbde570d521d2bafe5d58d3991022600507454ab8397f026ab039906e822_0
2025-05-31 11:15:24,233 - semgrep.rule_match - DEBUG - match_key = ('\'$\' ^[\\"\\\']([\\\'\\"\\<\\>\\*\\|\\{\\}\\[\\]\\%\\$]{1}|\\\\n|\\\\r|\\\\t|\\\\&)[\\"\\\']$ billB.replace((\'$\': string), ...)\n', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = 94cff2c38e274b8df609a2b7a77ecc920b1560934899ed569961743dda3f0862ff51f563c3fe143335f56002d50913bb2547e5e202e5a5602a7f88b89d5cd3c1_0
2025-05-31 11:15:24,234 - semgrep.rule_match - DEBUG - match_key = ('\'$\' ^[\\"\\\']([\\\'\\"\\<\\>\\*\\|\\{\\}\\[\\]\\%\\$]{1}|\\\\n|\\\\r|\\\\t|\\\\&)[\\"\\\']$ billB.replace((\'$\': string), ...)\n', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = 94cff2c38e274b8df609a2b7a77ecc920b1560934899ed569961743dda3f0862ff51f563c3fe143335f56002d50913bb2547e5e202e5a5602a7f88b89d5cd3c1_0
2025-05-31 11:15:24,234 - semgrep.rule_match - DEBUG - match_key = ('\'$\' ^[\\"\\\']([\\\'\\"\\<\\>\\*\\|\\{\\}\\[\\]\\%\\$]{1}|\\\\n|\\\\r|\\\\t|\\\\&)[\\"\\\']$ billB.replace((\'$\': string), ...)\n', PosixPath('client/src/components/PartnerPayoutsList.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.incomplete-sanitization') match_id = 94cff2c38e274b8df609a2b7a77ecc920b1560934899ed569961743dda3f0862ff51f563c3fe143335f56002d50913bb2547e5e202e5a5602a7f88b89d5cd3c1_0
2025-05-31 11:15:24,237 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:11.745873 on 103 files
2025-05-31 11:15:24,238 - semgrep.core_runner - DEBUG - findings summary: 10 warning, 1 error, 0 info
2025-05-31 11:15:24,241 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-05-31 11:15:24,242 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-05-31 11:15:24,242 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIaGPSGB/semgrep/bin/semgrep-core-proprietary'.
2025-05-31 11:15:24,381 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • <none>

  Partially analyzed due to parsing or internal Opengrep errors

   • tailwind.config.ts (1 lines skipped)
   • update-project/tailwind.config.ts (1 lines skipped)

2025-05-31 11:15:24,382 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 2 files only partially analyzed due to parsing or internal Opengrep errors

Ran 435 rules on 103 files: 11 findings.
2025-05-31 11:15:24,383 - semgrep.app.version - DEBUG - Version cache does not exist
2025-05-31 11:15:24,400 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
